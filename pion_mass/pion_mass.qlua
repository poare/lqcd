require "stdlib"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

--[[
Show a Nc x Nc color matrix U. Note that this cannot be a lattice field,
it must be an individual matrix.
--]]
function show_color_mat(U)
  local Nc = U:colors()
  for a = 0, Nc-1 do
    for b = 0, Nc-1 do
      local elt = U[{a=a,b=b}]
      printf("%.6f %+.6f\t", elt:real(), elt:imag())
    end
    printf("\n")
  end
end

function init_zero_field(L, Nc, U)
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu+1] = (A*complex(0,1)):exp()
  end
end

-- Initialize a gauge field from a .h5 file.
function initGaugeFieldHdf5(L, Nc, U, cfgbase, configNum)
  local cfghdf5 = string.format("cfgs/majorana/"..cfgbase.."/"..cfgbase.."_cfg_%d.h5", configNum)
  local cfgbaseh5 = string.format(cfgbase.."/cfg/%d", configNum)
  local hdf5params = { method = "phdf5" }

  local U = {}
  local name = string.format(cfghdf5, i0)
  print(name)
  local h5_reader = qcd.hdf5.Reader(name, hdf5params)
  for mu = 0, #L - 1 do
     U[mu+1] = h5_reader:read(string.format(cfgbaseh5,i0).."/mu"..tostring(mu), {lattice=L})
   end
   return U
end

function initGaugeFieldLime(L, path, cfgbase, configNum, gf)
  if gf then
    fileName = string.format(path..cfgbase.."/cfgs_gf/"..cfgbase.."_gf.lime%d", configNum)
  else
    fileName = string.format(path..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", configNum)
  end
  print(fileName .. "\n")
  reader, rinfo = qcd.qdpc.Reader(L, fileName)
  U, uInfo = reader:ColorMatrix(#L)
  return U
end

-- computes the pion interpolator for a single configuration of gauge field U.
function computePionInterpolator(L, U, vol, kappa, L_mom)

  -- Construct propagators.
  c_sw = 1.0            -- SW coefficient for clover term
  bc = {1, 1, 1, -1}    -- periodic in space, antiperiodic in time

  CL = qcd.Clover(U, kappa, c_sw, bc)
  solve = CL:solver(1e-20, 500)

  src = L:DiracPropagator()
  Nc = src:colors()
  for ic = 0, Nc - 1 do -- loop over color indices
    for is = 0, qcd.Ns - 1 do  -- loop over spinor indices
      local dv = L:DiracFermion()
      dv[{0, 0, 0, 0, c = ic, d = is}] = complex(1, 0)
      src[{c = ic, d = is}] = dv
    end
  end

  prop = solve(src)  -- D_u(n|m)^-1
  CL:close()

  -- original code didn't have prop:adjoin(), only prop
  local antiProp = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
  -- local twopt = (prop * gamma{mu = 5} * antiProp * gamma{mu = 5}):trace()

  -- This line should do the same as the gathering command, but try each out.
  -- local twopt_proj = twopt:sum(L:MultiSet(L[3], L:pcoord(3)))

  p = {0, 0, 0}
  local mom_proj = qcd.gather(L_mom, L, {L:pcoord(#L - 1)})  -- Gather all sites with same t coord
  -- build snk FT factor
  local FTarg = L:Real(0)
  for mu = 0, #L - 2 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * p[mu+1] * 2 * math.pi / L[mu]
  end
  local FT = FTarg:expi()

  -- save twopt
  local twopt = mom_proj:add( (FT * prop * gamma{mu=5} * anti_prop * gamma{mu=5}):trace() )
  for tp = 0, src_coord[#L] - 1 do
      twopt = twopt:shift( 0, "from_forward" )
   end

   return twopt

  -- Old code
  --[[
  local mom_proj = qcd.gather(L_mom, L, {L:pcoord(#L - 1)})  -- Gather all sites with same t coord
  twopt_proj = mom_proj:add(twopt)  -- project two point

  return twopt_proj
  ]]
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    error("Must enter jobid, cfgpath, and cfgbase.\n")
end

if mq then
    kappa = 1 / (2 * mq + 8)
end

if Lx and Lt and beta and kappa then
    printf("Numerical parameters:\nLattice size: (%d, %d, %d, %d).\nBeta: %f.\nKappa: %f.\n", Lx, Lx, Lx, Lt, beta, kappa)
else
    error("Numerical parameters must be entered: Lx, Lt, beta, mq or kappa.\n")
end

-- Set parameters
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare/"    -- specify what the file path to lqcd is

volume = 1    -- spatial volume
for i = 0, #L - 2 do
  volume = volume * L[i]
end
hypervolume = volume * L[3]

-- Paths to output file.
folder = lqcd_dir.."lqcd/pion_mass/output"
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

-- Compute correlators.
gf = true
status, U = pcall(initGaugeFieldLime, L, cfgpath, cfgbase, cfgnum, gf)
if status then
  msg = string.format("%d|", cfgnum)
  interpolator = computePionInterpolator(L, U, volume, kappa, L_mom)
  for n_t = 0, L[3] - 1 do
      msg = msg..string.format("%e+i(%e) ", interpolator[{n_t}]:real(), interpolator[{n_t}]:imag())
  end
  msg = msg.."\n"
  printf(msg)

  -- Open file writer and write to file.
  local hdf5params = { method = "phdf5" }
  writer = qcd.hdf5.Writer(filename, hdf5params)
  hdf5_path = string.format("twopt/%d", cfgnum)
  writer:remove(hdf5_path)
  writer:write(hdf5_path, interpolator)
  writer:close()
else
  printf("No gauge field configuration at %s.\n", cfgpath..cfgbase)
end
