-- Specific implementations for domain wall fermions. Mostly copied from clover_ferm.qlua
-- and modified.

require "lib/caching"
require "lib/solver"
require "lib/hmc_mosaic"

dw_ferm = {}

-- Each ferm impl should produce an object that provides:
--   :D(psi)                     Apply D to psi
--   :Dx(psi)                    Apply Dx to psi
--   :mxm_solver(eps,max_iter)   Produce (D^dag D) solver
--   :m_solver(eps,max_iter)     Produce D solver

-- GPU implementation of solver + CPU dslash
local quda_solver_handle = nil -- track old solver so we can close if new needed
function dw_ferm.quda_4d_nc3(M5, LS, ml, bcs, flags)
   flags = flags or {}
   local Nd = #bcs
   for d = 1, #bcs-1 do
      assert(bcs[d] == 1) -- only last dim allowed anti-periodic
   end
   local t_boundary = (bcs[#bcs] == -1) and "ANTI_PERIODIC_T" or "PERIODIC_T"
   -- local cpu_impl = clover_ferm.cpu_4d_nc3(kappa, csw, bcs, flags)
   -- local rescale = (flags.rescale ~= nil) and flags.rescale or
   --       (Nd + kappa_to_mass(kappa, Nd)) -- default Chroma scaling
   print("Inside dw_ferm")
   return function(U)
      local t = {
         U = U,
         m5 = M5,
         Ls = LS,
         bcs = bcs
         -- cpu_impl = cpu_impl(U),
         --D = clover_ferm.D,
         -- deriv_D = clover_ferm.deriv_D,
			-- 	 D_deriv_D = clover_ferm.D_deriv_D,
			-- 	 D_deriv_D_prop = clover_ferm.D_deriv_D_prop,
         -- rescale = rescale
      }
      -- Delegate operator application to CPU. TODO
      -- t.D = function(self, psi) return self.cpu_impl:D(psi) end
      -- t.Dx = function(self, psi) return self.cpu_impl:Dx(psi) end

      local function make_and_store_solver(eps, max_iter)
         -- need to hold handle because can only make one solver instance in QUDA
         if quda_solver_handle ~= nil then
            quda_solver_handle:close()
         end
         local quda_solver = qcd.quda.solver(
            U,
            {t_boundary = t_boundary},
            {dslash_type = "DOMAIN_WALL_DSLASH",
             tol = eps,
             maxiter = max_iter,
             m5 = M5,
             Ls = LS,
             mass = ml,
             solve_type = "NORMOP_SOLVE",
             inv_type = "CG_INVERTER",
             matpc_type = "MATPC_ODD_ODD"
          })
         quda_solver_handle = quda_solver
         return quda_solver
      end

      -- TODO(gkanwar): Real mxm solver in QUDA?
      t.mxm_solver = function(self, eps, max_iter)
         local quda_solver = make_and_store_solver(eps, max_iter)
         return function(psi)
            local timer = create_timer('DWF QUDA')
            local tmp = gamma{mu=5}*quda_solver:solve(gamma{mu=5}*psi)
            local sol = quda_solver:solve(tmp)
            timer()
            return sol --/t.rescale^2
         end
      end
      t.m_solver = function(self, eps, max_iter)    -- This is the solver that gets called, goes into make_and_store_solver
         local quda_solver = make_and_store_solver(eps, max_iter)
         return function(psi) return quda_solver:solve(psi) end --/t.rescale end
      end
      return t
   end
end


function create_dwf_multigrid_solver(U, M5, LS)
   local gauge_params = {
      type                      = "WILSON",
      gauge_order               = "QDP",
      anisotropy                = 1.0,
      t_boundary                = "ANTI_PERIODIC"
   };

   --- With current setup, Multigrid performs a two-level (1 coarse lattice, 1 fine lattice) approach
   --- For 2 coarse levels, add another "coarse level" table params in multigrid_params.levels, and so on
   local multrigrid_params = {
      -- generic MG params
      setup_type                = "NULL",
      post_orthonormalize       = "YES",
      pre_orthonormalize        = "NO",
      compute_null_vector       = "YES",
      generate_all_levels       = "YES",
      run_verify                = "YES",
      vec_infile                = "",
      vec_outfile               = "",
      levels = {
	 -- coarse level 0 params
         {
            geo_block_size            = {4, 4, 4, 4},  -- Block size
            spin_block_size           = 2,             -- 2 for level 0, 1 afterwards
            n_vec                     = 24,            -- Number of Null vectors, 24 or 32 usually work well
            precision_null            = "HALF",        -- Precision to store the Null-space vectors
            verbosity                 = "SUMMARIZE",   -- Verbosity on each level of the multigrid
            setup_inv_type            = "BICGSTAB",    -- Inverter to use in the setup phase
            num_setup_iter            = 1,             -- experimental, keep to one for now
            setup_tol                 = 5e-6,          -- Tolerance to use in the setup phase, usually set to5e-6
            setup_maxiter             = 500,           -- Maximum number of iterations for each setup solver, usually set to 500
            coarse_solver             = "GCR",         -- The solver that wraps around the coarse grid correction and smoother (levels 1+)
            coarse_solver_tol         = 0.25,          -- Tolerance for the solver that wraps around the coarse grid correction and smoother (levels 1+)
            coarse_solver_maxiter     = 10000,         -- Tolerance for the solver that wraps around the coarse grid correction and smoother (levels 1+)
            smoother                  = "MR",          -- Smoother to use on each level
            smoother_tol              = 0.25,          -- Tolerance to use for the smoother / solver on each level
            nu_pre                    = 0,             -- Number of pre-smoother applications
            nu_post                   = 6,             -- Number of post-smoother applications
            omega                     = 1.0,           -- Over/under relaxation factor for the smoother at each level, 0.8-1.0
            smoother_schwarz_type     = "INVALID",    -- Whether to use additive or multiplicative Schwarz preconditioning in the smoother
            smoother_solve_type       = "DIRECT_PC",   -- The type of smoother solve to do on each grid (e/o preconditioning or not)
            coarse_grid_solution_type = "MATPC",       -- The type of residual to send to the next coarse grid, and thus the type of solution to receive back from this coarse grid, if smoother_solve_type == DIRECT_PC then set to MATPC, otherwise to MAT
            cycle_type                = "RECURSIVE",   -- Set always to "RECURSIVE"
            global_reduction          = "NO",          -- Whether to use global reductions or not for the smoother / solver at each level - experimental. If smoother_schwarz_type != FALSE, this must be set to NO
            location                  = "CUDA",        -- MG Solver location
            setup_location            = "CUDA",        -- Location where each level should be done
            mu_factor                 = 1.             -- twisted mass coarse level mu-factor, irrelevant here
         },
	 -- finest level params
         {
            verbosity                 = "VERBOSE",         -- Verbosity on each level of the multigrid
            smoother                  = "GCR",            -- Smoother to use on each level
            smoother_tol              = 0.1,              -- Tolerance to use for the smoother / solver on each level
            smoother_schwarz_type     = "INVALID", -- Whether to use additive or multiplicative Schwarz preconditioning in the smoother
            smoother_schwarz_cycle    = 2,
            smoother_solve_type       = "DIRECT_PC",      -- The type of smoother solve to do on each grid (e/o preconditioning or not)
            coarse_grid_solution_type = "MATPC",          -- The type of residual to send to the next coarse grid, and thus the type of solution to receive back from this coarse grid. If smoother_solve_type == DIRECT_PC then set to MATPC, otherwise to MAT
            cycle_type                = "RECURSIVE",      -- Set always to "RECURSIVE"
            global_reduction          = "NO",             -- Whether to use global reductions or not for the smoother / solver at each level - experimental. If smoother_schwarz_type != FALSE, this must be set to NO
            location                  = "CUDA",           -- MG Solver location
            setup_location            = "CUDA",           -- Location where each level should be done
         }
      }
   };

   --- Outer solver params
   local invert_params = {
      kappa                              = kappa,
      m5                                 = M5,
      Ls                                 = LS,
      sp_pad                             = 0,
      cl_pad                             = 0,
      cpu_prec                           = "DOUBLE",
      cuda_prec                          = "DOUBLE",
      cuda_prec_precondition             = "HALF",
      cuda_prec_sloppy                   = "SINGLE",
      preserve_source                    = "NO",
      gamma_basis                        = "DEGRAND_ROSSI",
      dirac_order                        = "QDP",
      -- clover_cpu_prec                    = "DOUBLE",
      -- clover_cuda_prec                   = "DOUBLE",
      -- clover_cuda_prec_precondition      = "SINGLE",
      -- clover_cuda_prec_sloppy            = "SINGLE",
      -- clover_order                       = "PACKED",
      input_location                     = "CPU",
      output_location                    = "CPU",
      dslash_type                        = "DOMAIN_WALL_DSLASH",
      dagger                             = "NO",
      mass_normalization                 = "MASS",
      solution_type                      = "MAT",
      solve_type                         = "DIRECT_PC",
      -- matpc_type                         = "EVEN_EVEN",
      matpc_type                         = "MATPC_ODD_ODD",
      inv_type                           = "GCR",
      verbosity                          = "VERBOSE",
      verbosity_precondition             = "SILENT",
      inv_type_precondition              = "MG",
      pipeline                           = 0,
      gcrNkrylov                         = 10,
      tol                                = 1e-10,
      residual_type                      = "L2_RELATIVE",
      tol_hq                             = 0.0,
      maxiter                            = 10000,
      reliable_delta                     = 1e-4,
      schwarz_type                       = "ADDITIVE",
      precondition_cycle                 = 1,
      tol_precondition                   = 0.1,
      maxiter_precondition               = 1,
      omega                              = 1.0
   };
   ------------------------------------------------

   --- Inner solver params
   local inner_params = {
      m5                                 = M5,
      Ls                                 = LS,                       -- Hard coded in Quda
      sp_pad                             = 0,                       -- Hard coded in Quda
      cl_pad                             = 0,                       -- Hard coded in Quda
      cpu_prec                           = "DOUBLE",
      cuda_prec                          = "DOUBLE",
      cuda_prec_precondition             = "HALF",
      cuda_prec_sloppy                   = "SINGLE",
      preserve_source                    = "NO",                    -- Hard coded in Quda
      gamma_basis                        = "DEGRAND_ROSSI",         -- Hard coded in Quda
      dirac_order                        = "DIRAC_ORDER",           -- Hard coded in Quda
      -- clover_cpu_prec                    = "DOUBLE",
      -- clover_cuda_prec                   = "DOUBLE",
      -- clover_cuda_prec_precondition      = "SINGLE",
      -- clover_cuda_prec_sloppy            = "SINGLE",
      -- clover_order                       = "PACKED",                -- Hard coded in Quda
      input_location                     = "CPU",                   -- Hard coded in Quda
      output_location                    = "CPU",                   -- Hard coded in Quda
      dslash_type                        = "DOMAIN_WALL_DSLASH",
      dagger                             = "NO",                    -- Hard coded in Quda
      mass_normalization                 = "MASS",                 -- Hard coded in Quda
      -- matpc_type                         = "EVEN_EVEN",
      matpc_type                         = "MATPC_ODD_ODD",
      solution_type                      = "MAT",                   -- Hard coded in Quda
      solve_type                         = "DIRECT",                -- Hard coded in Quda
      -- From hereafter, Ignored by MG setup, but set to pass Init test
      inv_type                           = "GCR",
      tol                                = 1e-10,
      maxiter                            = 10000,
      reliable_delta                     = 1e-10,
      gcrNkrylov                         = 10,
      verbosity                          = "VERBOSE",
      verbosity_precondition             = "VERBOSE"
   };

   local QS = qcd.quda.inverter.multigrid(U,
                                          gauge_params,
                                          invert_params,
                                          multrigrid_params,
                                          inner_params);
   return QS
end
