require "stdlib"
require "lib/fermion" 
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator" 
require "lib/baryon_blocks"
require "lib/baryon_weights"
require "lib/quda"

local i0 = 1000
local src_t = 0
local B1_src_n = 2
local B1_snk_n = 2
local B2_src_n = 2
local B2_snk_n = 2
local datadir = "/data/wombat/users/mlwagman/mosaic/props/cl3_32_48_b6p1_m0p2450/"

local Lsparse = 8
local sparse_fac = 4
local Lfine = Lsparse*sparse_fac
local Lt = 48
local maxt = Lt/2
maxt = 1
local Vsnk = Lsparse^3
local L = qcd.lattice{Lfine,Lfine,Lfine,Lt}
local L_prop = qcd.lattice{Lsparse,Lsparse,Lsparse,Lt}
local L_sparse = qcd.lattice{Lsparse,Lsparse,Lsparse,maxt}
local Nc = 3
local Ns = 2

--local p_list = {{0,0,0}, {0,0,1*(2*math.pi/Lfine)}, {0,0,2*(2*math.pi/Lfine)}}
local p_list = {{0,0,0}}
local pnames = {0, 1, 2}
local k1_list = {{0,0,0}, {0,0,1*(2*math.pi/Lfine)}, {0,0,2*(2*math.pi/Lfine)}, {0,0,3*(2*math.pi/Lfine)}}
local k2_list = {{0,0,0}, {0,0,-1*(2*math.pi/Lfine)}, {0,0,-2*(2*math.pi/Lfine)}, {0,0,-3*(2*math.pi/Lfine)}}
local Nsrc = #k1_list
local NsrcHex = 1
local Nsnk = #k1_list
local NsnkHex = 1
printf("interpolators (%d + %d) x (%d + %d) \n ", Nsrc, NsrcHex, Nsnk, NsnkHex)

-- read props and build source wavefunctions
local src_psi = {}
local hex_src_psi = {}
local B1_src_psi = {}
local B2_src_psi = {}
local B1_f_dirac_props = {}
local B1_b_dirac_props = {}
local B2_f_dirac_props = {}
local B2_b_dirac_props = {}
for pInd=1,#p_list do
   src_psi[pInd] = {}
   hex_src_psi[pInd] = {}
   B1_src_psi[pInd] = {}
   B2_src_psi[pInd] = {}
   for i=1,1 do
       src_psi[pInd][i] = {}
   end
   for i=1,NsrcHex do
      hex_src_psi[pInd][i] = {}
   end
   for i=1,Nsrc do
      B1_src_psi[pInd][i] = {}
      B2_src_psi[pInd][i] = {}
   end
end
local y = 1
for xx = 1, 7 do
   for yy = 1, 7 do
      for zz = 1, 7 do
         local B1_propfile = string.format(datadir.."%d/prop_x%dy%dz%dt%d_Src%d_Snk%d", i0, xx, yy, zz, src_t, B1_src_n, B1_snk_n)
         if ((xx - 4)^2 + (yy - 4)^2 + (zz - 4)^2) < 10 then
            printf("Looking for "..B1_propfile.."\n")
            local fP, finfo, rinfo = qcd.qdpcc.read_prop(L_prop, B1_propfile)
            if y == 1 then
               printf(finfo.."\n")
               printf(rinfo.."\n")
            end
            B1_f_dirac_props[y] = convert_prop_to_Dirac_basis( fP, maxt, false, L_sparse)
            B1_b_dirac_props[y] = convert_prop_to_Dirac_basis( fP, maxt, true, L_sparse)
            local y0 = (xx - 4) * sparse_fac % Lsparse;
            local y1 = (yy - 4) * sparse_fac % Lsparse;
            local y2 = (zz - 4) * sparse_fac % Lsparse;
            for pInd=1,#p_list do
               p = p_list[pInd]
               local src_FT_arg = -1.0*(p[1]*y0 + p[2]*y1 + p[3]*y2) * sparse_fac
               src_psi[pInd][1][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
               for i=1,NsrcHex do
                  hex_src_psi[pInd][i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
               end
               for i=1,Nsrc do
                  local src_FT_arg = -1.0*((p[1]+k1_list[i][1])*y0 + (p[2]+k1_list[i][2])*y1 + (p[3]+k1_list[i][3])*y2) * sparse_fac
                  B1_src_psi[pInd][i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
                  local src_FT_arg = -1.0*((p[1]+k2_list[i][1])*y0 + (p[2]+k2_list[i][2])*y1 + (p[3]+k2_list[i][3])*y2) * sparse_fac
                  B2_src_psi[pInd][i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
               end
            end
            y = y + 1
         end
      end
   end
end
if ( (B1_src_n == B2_src_n) and (B1_snk_n == B2_snk_n) ) then
   B2_f_dirac_props = B1_f_dirac_props
   B2_b_dirac_props = B1_b_dirac_props
else
   local y = 1
   for xx = 1, 7 do
      for yy = 1, 7 do
         for zz = 1, 7 do
            local B2_propfile = string.format(datadir.."%d/prop_x%dy%dz%dt%d_Src%d_Snk%d", i0, xx, yy, zz, src_t, B2_src_n, B2_snk_n)
            if ((xx - 4)^2 + (yy - 4)^2 + (zz - 4)^2) < 10 then
               printf("Looking for "..B2_propfile.."\n")
               local fP, finfo, rinfo = qcd.qdpcc.read_prop(L_prop, B2_propfile)
               if y == 1 then
                  printf(finfo.."\n")
                  printf(rinfo.."\n")
               end
               B2_f_dirac_props[y] = convert_prop_to_Dirac_basis( fP, maxt, false, L_sparse)
               B2_b_dirac_props[y] = convert_prop_to_Dirac_basis( fP, maxt, true, L_sparse)
               y = y + 1
            end
         end
      end
   end
   B2_f_dirac_props = convert_ca2a_props_to_Dirac_basis(B2_ca2a_prop, maxt, false, L_sparse)
   B2_b_dirac_props = convert_ca2a_props_to_Dirac_basis(B2_ca2a_prop, maxt, true, L_sparse)
end
local Vsrc = #B1_f_dirac_props
printf("geometry: Vsrc = %d, Vsnk = %d \n", Vsrc, Vsnk)

local hdf5params = { method = "phdf5" }
local database = "qblocks_800_"..tostring(i0).."_t"..tostring(src_t).."_srcS"..tostring(B1_src_n)..tostring(B2_src_n).."_snkS"..tostring(B1_snk_n)..tostring(B2_snk_n)..".h5"
printf("writing to "..database.."\n")

-- build sink wavefunctions and calculate correlators
for pInd=1,#p_list do
   p = p_list[pInd]
   local L_space = qcd.lattice{Lsparse,Lsparse,Lsparse}
   -- one nucleon
   do
   local snk_psi = {}
   local snk_FT_arg = L_space:Real(0)
   for mu = 0, #L_space - 1 do
      snk_FT_arg = snk_FT_arg + L_space:Real(L_space:pcoord(mu)) * p[mu+1] * sparse_fac
   end
   local snk_FT = snk_FT_arg:expi() 
   for i=1,1 do
      snk_psi[i] = snk_FT
   end
   local f_baryon_all_props = {}
   local b_baryon_all_props = {}
   for a = 0, Nc-1 do
      f_baryon_all_props[a+1] = B1_f_dirac_props
      b_baryon_all_props[a+1] = B1_b_dirac_props
   end
   local nuc_timer = create_timer("qblocks nucleons")
   local f_B1_G1g_corr = blocks.nucleon_2pt(f_baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, src_psi[pInd], snk_psi, Ns)
   nuc_timer()
   for t=0, maxt-1 do
      printf("nucleon_r1_f[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, f_B1_G1g_corr[1][1][1][t]:real(), f_B1_G1g_corr[1][1][1][t]:imag() )
   end
   for t=0, maxt-1 do
      printf("nucleon_r2_f[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, f_B1_G1g_corr[2][1][1][t]:real(), f_B1_G1g_corr[2][1][1][t]:imag() )
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, 1 do
      for n = 1, 1 do
         for t = 0, maxt - 1 do
            h5_force_write(h5_writer, string.format("B1_G1g_r1_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_B1_G1g_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B1_G1g_r2_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_B1_G1g_corr[2][m][n][t])
         end
      end
   end
   h5_writer:close()
   local b_B1_G1g_corr = blocks.nucleon_2pt(b_baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, src_psi[pInd], snk_psi, Ns)
   nuc_timer()
   for t=0, maxt-1 do
      printf("nucleon_r1_b[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, b_B1_G1g_corr[1][1][1][t]:real(), b_B1_G1g_corr[1][1][1][t]:imag() )
   end
   for t=0, maxt-1 do
      printf("nucleon_r2_b[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, b_B1_G1g_corr[2][1][1][t]:real(), b_B1_G1g_corr[2][1][1][t]:imag() )
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, 1 do
      for n = 1, 1 do
         for t = 0, maxt - 1 do
            h5_force_write(h5_writer, string.format("B1_G1g_r1_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_B1_G1g_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B1_G1g_r2_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_B1_G1g_corr[2][m][n][t])
         end
      end
   end
   h5_writer:close()
   end
   -- two nucleons
   do
   local L_big = qcd.lattice{Lsparse,Lsparse,Lsparse,Lsparse,Lsparse,Lsparse}
   local L_space = qcd.lattice{Lsparse,Lsparse,Lsparse}
   local L_fine = qcd.lattice{Lfine,Lfine,Lfine}
   local snk_psi = {}
   local B1_snk_one_psi = {}
   local B2_snk_one_psi = {}
   for i=1,Nsnk do
     B1_snk_one_psi[i] = {}
     B2_snk_one_psi[i] = {}
     for x=1,Vsnk do
        local x2 = x % Lsparse;
        local x1 = ((x - x2)/Lsparse) % Lsparse;
        local x0 = (x - x1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local snk_FT_arg = 1.0*((p[1]+k1_list[i][1])*x0 + (p[2]+k1_list[i][2])*x1 + (p[3]+k1_list[i][3])*x2) * sparse_fac
        B1_snk_one_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
        local snk_FT_arg = 1.0*((p[1]+k2_list[i][1])*x0 + (p[2]+k2_list[i][2])*x1 + (p[3]+k2_list[i][3])*x2) * sparse_fac
        B2_snk_one_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
     end
   end
   local big_I1 = {}
   local big_I2 = {}
   for mu = 0, #L-2 do
      big_I1[mu+1] = L_big:pcoord(mu)
      big_I2[mu+1] = L_big:pcoord(#L-1+mu)
   end
   local big_I1_scatter = qcd.scatter(L_big, L_space, big_I1)
   local big_I2_scatter = qcd.scatter(L_big, L_space, big_I2)
   local sparseI = {}
   for mu = 0, #L - 2 do
      sparseI[mu+1] = L_space:pcoord(mu) * sparse_fac
   end
   local sparse_scatter = qcd.scatter(L_space, L_fine, sparseI)
   for i=1,Nsnk do
      local snk_FT_arg = L_fine:Real(0)
      for mu = 0, #L - 2 do
         snk_FT_arg = snk_FT_arg + L_fine:Real(L_fine:pcoord(mu)) * (p[mu+1]+k1_list[i][mu+1])
      end
      local snk_FT_1 = sparse_scatter(snk_FT_arg:expi())
      local snk_FT_arg = L_fine:Real(0)
      for mu = 0, #L - 2 do
         snk_FT_arg = snk_FT_arg + L_fine:Real(L_fine:pcoord(mu)) * (p[mu+1]+k2_list[i][mu+1])
      end
      local snk_FT_2 = sparse_scatter(snk_FT_arg:expi())
      snk_psi[i] = 0
      -- translations
      for xs = 0, Lsparse-1 do
         for ys = 0, Lsparse-1 do
            for zs = 0, Lsparse-1 do
               snk_psi[i] = snk_psi[i] + (1.0/(2*Vsnk))*(big_I1_scatter(snk_FT_1) * big_I2_scatter(snk_FT_2) + big_I1_scatter(snk_FT_2) * big_I2_scatter(snk_FT_1))
               snk_FT_1 = snk_FT_1:shift(2, "from_forward")
               snk_FT_2 = snk_FT_1:shift(2, "from_forward")
            end
            snk_FT_1 = snk_FT_1:shift(1, "from_forward")
            snk_FT_2 = snk_FT_1:shift(1, "from_forward")
         end
         snk_FT_1 = snk_FT_1:shift(0, "from_forward")
         snk_FT_2 = snk_FT_1:shift(0, "from_forward")
      end
   end
   local hex_snk_psi = {}
   for i=1,NsnkHex do
      hex_snk_psi[i] = {}
      for x=1,Vsnk do
        local x2 = x % Lsparse;
        local x1 = ((x - x2)/Lsparse) % Lsparse;
        local x0 = (x - x1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local snk_FT_arg = 1.0*(p[1]*x0 + p[2]*x1 + p[3]*x2) * sparse_fac
        hex_snk_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
      end
   end
   local space_symmetric = 0
   local snk_entangled = 1
   printf("built wavefunctions \n")
   local all_perms, all_sigs
   local perms = {}
   local sigs = {}
   local flavor_list = {{1, 3, 5}, {2, 4, 6}}
   all_perms, all_sigs = two_flavor_perms(flavor_list)
   local permnum = 0;
   for i=1,#all_perms do
      perms[i] = {}
      if ((all_perms[i][1] < all_perms[i][3]) and (all_perms[i][4] < all_perms[i][6])) then 
         permnum = permnum + 1
         for q=1,2*Nc do
            perms[permnum][q] = all_perms[i][q]
         end
         sigs[permnum] = all_sigs[i]
      end
   end
   printf("built perms \n")
   local f_two_baryon_all_props = {}
   local b_two_baryon_all_props = {}
   for a = 0, Nc-1 do
      f_two_baryon_all_props[a+1] = B1_f_dirac_props
      b_two_baryon_all_props[a+1] = B1_b_dirac_props
   end
   for a = 0, Nc-1 do
      f_two_baryon_all_props[Nc+a+1] = B2_f_dirac_props
      b_two_baryon_all_props[Nc+a+1] = B2_b_dirac_props
   end
   local two_nuc_timer = create_timer("qblocks two nucleons")
   local f_dinucleon_corr = blocks.two_nucleon_2pt(f_two_baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, perms, sigs, B1_src_psi[pInd], B2_src_psi[pInd], snk_psi, B1_snk_one_psi, B2_snk_one_psi, hex_src_psi[pInd], hex_snk_psi, space_symmetric, snk_entangled, Ns)
   two_nuc_timer()
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r1_f[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, f_dinucleon_corr[2][m][n][t]:real(), f_dinucleon_corr[2][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r2_f[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, f_dinucleon_corr[3][m][n][t]:real(), f_dinucleon_corr[3][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r3_f[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, f_dinucleon_corr[4][m][n][t]:real(), f_dinucleon_corr[4][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("dinucleon_f[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, f_dinucleon_corr[1][m][n][t]:real(), f_dinucleon_corr[1][m][n][t]:imag() )
         end
      end
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            h5_force_write(h5_writer, string.format("B2_A1g_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_dinucleon_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r1_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_dinucleon_corr[2][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r2_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_dinucleon_corr[3][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r3_p%d_f/src%dsnk%dt%d", pnames[pInd],m,n,t), f_dinucleon_corr[4][m][n][t])
         end
      end
   end
   h5_writer:close()
   local b_dinucleon_corr = blocks.two_nucleon_2pt(b_two_baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, perms, sigs, B1_src_psi[pInd], B2_src_psi[pInd], snk_psi, B1_snk_one_psi, B2_snk_one_psi, hex_src_psi[pInd], hex_snk_psi, space_symmetric, snk_entangled, Ns)
   two_nuc_timer()
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r1_b[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, b_dinucleon_corr[2][m][n][t]:real(), b_dinucleon_corr[2][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r2_b[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, b_dinucleon_corr[3][m][n][t]:real(), b_dinucleon_corr[3][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("deuteron_r3_b[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, b_dinucleon_corr[4][m][n][t]:real(), b_dinucleon_corr[4][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            printf("dinucleon_b[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, b_dinucleon_corr[1][m][n][t]:real(), b_dinucleon_corr[1][m][n][t]:imag() )
         end
      end
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, maxt - 1 do
            h5_force_write(h5_writer, string.format("B2_A1g_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_dinucleon_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r1_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_dinucleon_corr[2][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r2_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_dinucleon_corr[3][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r3_p%d_b/src%dsnk%dt%d", pnames[pInd],m,n,t), b_dinucleon_corr[4][m][n][t])
         end
      end
   end
   h5_writer:close()
   end
end
