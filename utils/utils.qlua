require "stdlib"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function toSUn(L, X)    -- Project a matrix onto SU(N)
  local Y = (X - X:adjoin()) / 2    -- anti-hermitian part
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1, 0))):exp()
end

function weak_SUn(L, S)    -- Generate a SU(N) field close to 1
  return toSUn(L, .1 * S:gaussian_ColorMatrix())
end

function weakSingleSUn()
  return toSUnSingle(.1 * qcd.ColorMatrix())    -- need an analog of S:gaussian_ColorMatrix
end

function strong_SUn(L, S)
  local v = weak_SUn(L, S)
  for i = 1, 100 do -- multiply a lot of small SU(n) matrices, then re project
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

function plaquette(U, i, j)   -- U is the gauge field configuration, i = \hat{\mu}, j = \hat{\nu}
  local Ui = U[j + 1]:shift(i, "from_forward")
  local Uj = U[i + 1]:shift(j, "from_forward")
  local Pij = (U[i + 1] * Ui * Uj:adjoin() * U[j + 1]:adjoin()):trace():real()
  return Pij:sum() / (vol * Nc)
end

--[[
Returns the staple field from deleting the link variable in the mu direction
]]
function getStaples(U, mu)
  staples = L:ColorMatrixN(Nc, 0.0)
  for nu = 0, #L - 1 do
    if nu ~= mu then
      local UMu = U[nu + 1]:shift(mu, "from_forward")
      local UNu = U[mu + 1]:shift(nu, "from_forward")
      local UMuNu = U[nu + 1]:shift(mu, "from_forward"):shift(nu, "from_backward")
      local UNegNuMu = U[mu + 1]:shift(nu, "from_backward")
      local UNegNuNu = U[nu + 1]:shift(nu, "from_backward")
      staples = staples + (UMu * UNu:adjoin() * U[nu + 1]:adjoin()
          + UMuNu:adjoin() * UNegNuMu:adjoin() * UNegNuNu)
    end
  end
  return staples
end

-- returns the staple in the mu direction at site (x, y, z, t)
function getStaple(U, mu, x, y, z, t)
  return getStaples(U, mu)[{x, y, z, t}]
end

-- computes the local change in action from a field redefinition
function computeLocalDeltaS(U, UPrimeMu, mu, x, y, z, t, Nc)
  beta = 5.7
  dU = UPrimeMu[{x, y, z, t}] - U[mu + 1][{x, y, z, t}]
  return (-1) * beta / Nc * (dU * getStaple(U, mu, x, y, z, t)):trace():real()
end

-- Construct random gauge field
function getRandomColorMatrix(L, S)
  U = {}
  for i = 0, #L - 1 do
    U[i + 1] = toSUn(.3 * S:gaussian_ColorMatrix())
  end
  return U
end

-- Reads an individual real-valued gauge configuration from a text file.
function read_gauge_txt(filename, U, Lx, Lt, Nd, Nc, imag)
  local counter = 0
  local x, y, z, t, mu, a, b
  for line in io.lines(filename) do
    local temp = counter
    local value = tonumber(line)
    b = temp % Nc
    temp = temp - b
    temp = temp / Nc
    a = temp % Nc
    temp = temp - a
    temp = temp / Nc
    x = temp % Lx
    temp = temp - x
    temp = temp / Lx
    y = temp % Lx
    temp = temp - y
    temp = temp / Lx
    z = temp % Lx
    temp = temp - z
    temp = temp / Lx
    t = temp % Lt
    temp = temp - t
    temp = temp / Lt
    mu = temp
    -- if temp >= Nd, this is bad
    -- if temp >= Nd then printf("%d\n", counter) end
    assert (temp < Nd)
    local comp_value
    if imag then
      comp_value = complex(0, value)
    else
      comp_value = complex(value, 0)
    end
    U[mu+1][{x,y,z,t,a=a,b=b}] = U[mu+1][{x,y,z,t,a=a,b=b}] + comp_value
    counter = counter + 1
  end
  return U
end

--[[
Run get_cfgs.py first on folder with all gauge configurations
to generate a text file at path..base.."_config_ids.txt"
]]
function getCfgIds(path, base)
  cfgIds = {}
  fname = path..base.."/config_ids.txt"
  printf("Reading configuration numbers from %s", fname)
  i = 0
  for line in io.lines(fname) do
    cfgIds[i] = tonumber(line)
    i = i + 1
  end
  return cfgIds
end
