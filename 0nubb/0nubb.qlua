#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function compute_Zq_momsource(L, U, ferm_prop, p_list, hypervolume, group, clover, writer, Nc)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local mom4_prop = (FT * prop):sum()
    mom4_prop = (1 / hypervolume) * mom4_prop

    local prop_path = string.format("prop_sink/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)
  end
end

--[[
 For each momenta pair (k1, k2), computes (for q = k2 - k1):
 1. Mom-projected propagator S(q)
 2. Three point function for vector operator GV = gamma{mu = mu}
 3. Three point function for axial operator GA = gamma{mu = mu} * gamma{mu = 5}
 4. Three point function for operators O1, O2, O3, O1', O2' used in 0nubb
]]
function compute_npr_momsource(L, U, ferm_prop, k1_list, k2_list, hypervolume, group, clover, writer, gammaList)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for kidx = 1, #k1_list do
    printf("p index: %d\n", kidx)
    local k1 = k1_list[kidx]
    local k2 = k2_list[kidx]
    local q = {}
    for mu = 0, #L - 1 do
        q[mu + 1] = k2[mu + 1] - k1[mu + 1]
      end
    printf("k1 is (%d, %d, %d, %d), k2 is (%d, %d, %d, %d), q is (%d, %d, %d, %d).", k1[1], k1[2], k1[3], k1[4],
              k2[1], k2[2], k2[3], k2[4], q[1], q[2], q[3], q[4])
    local qFTarg = L:Real(0)
    local qFT2arg = L:Real(0)    -- TODO figure out BCs: can we just take qFT^2, or do we need to use 2q + bvec in argument?
    for mu = 0, #L - 1 do
      qFTarg = qFTarg + L:Real(L:pcoord(mu)) * (q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      qFT2arg = qFT2arg + L:Real(L:pcoord(mu)) * (2 * q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local qFT = qFTarg:expi()
    local qFT2 = qFT2arg:expi()

    -- Write k1 and k2 to file and make a map q <--> k1, k2. Might have errors since k1 / k2 aren't lattice fields.
    local L_vec = qcd.lattice{4}
    local k1_lat = L_vec:Int(0)
    local k2_lat = L_vec:Int(0)
    for mu = 0, #L - 1 do
      k1_lat[{mu}] = k1[mu + 1]
      k2_lat[{mu}] = k2[mu + 1]
    end
    local k1_path = string.format("moms/q%d%d%d%d/k1", q[1], q[2], q[3], q[4])
    local k2_path = string.format("moms/q%d%d%d%d/k2", q[1], q[2], q[3], q[4])
    h5_force_write(writer, k1_path, k1_lat)
    h5_force_write(writer, k2_path, k2_lat)

    local srck1 = compute_spacetime_wall_source_antiperiodicBC(U, k1)
    local srck2 = compute_spacetime_wall_source_antiperiodicBC(U, k2)
    local srcq = compute_spacetime_wall_source_antiperiodicBC(U, q)

    -- COMPUTE PROPAGATORS
    local S_k1 = compute_propagator(U, ferm_prop, srck1)
    local S_k2 = compute_propagator(U, ferm_prop, srck2)
    local S_q = compute_propagator(U, ferm_prop, srcq)

    local mom4_prop_q = (qFT * S_q):sum()
    local antiprop_k1 = gamma{mu = 5} * S_k1:adjoin() * gamma{mu = 5}

    -- Write momentum projected propagator to file
    local prop_path = string.format("prop/q%d%d%d%d", q[1], q[2], q[3], q[4])
    h5_force_write(writer, prop_path, mom4_prop_q)
    printf("Propagator written at path: %s\n", prop_path)

    -- Vector and axial currents.
    for mu = 0, #L - 1 do
      local GV = (qFT * antiprop_k1 * (gamma{mu = mu} * S_k2)):sum()
      local GA = (qFT * antiprop_k1 * ((gamma{mu = mu} * gamma{mu = 5}) * S_k2)):sum()
      local op_path_V = string.format("GV%d/q%d%d%d%d", mu + 1, q[1], q[2], q[3], q[4])
      local op_path_A = string.format("GA%d/q%d%d%d%d", mu + 1, q[1], q[2], q[3], q[4])
      h5_force_write(writer, op_path_V, GV)
      h5_force_write(writer, op_path_A, GA)
      printf("Matrix element GV%d written at: %s\n", mu + 1, op_path_V)
      printf("Matrix element GA%d written at: %s\n", mu + 1, op_path_A)
    end

    -- Sort A tensor into gamma structures
    -- local AL = A[1]
    -- local AR = A[2]
    -- local AvecL = {A[3], A[4], A[5], A[6]}
    -- local AvecR = {A[7], A[8], A[9], A[10]}
    -- gammaList = {PL, PR, gamma^0 PL, ..., gamma^3 PL, gamma^0 PR, ..., gamma^0 PR}

    -- Get three point function for unprimed operators
    print("Evaluating three point functions.")
    local Nc = S_k2:colors()
    local Nd = 4
    local L_NPR = qcd.lattice{Nd, Nd, Nd, Nd, Nc, Nc, Nc, Nc}
    local G1 = L_NPR:Complex(complex(0, 0))
    local G2 = L_NPR:Complex(complex(0, 0))
    local G3 = L_NPR:Complex(complex(0, 0))
    local G1prime = L_NPR:Complex(complex(0, 0))
    local G2prime = L_NPR:Complex(complex(0, 0))
    for alpha = 0, Nd - 1 do
      for beta = 0, Nd - 1 do
        for gamma = 0, Nd - 1 do
          for sigma = 0, Nd - 1 do
            printf("Index (alpha, beta, gamma, sigma): (%d, %d, %d, %d)", alpha, beta, gamma, sigma)
            for a = 0, Nc - 1 do
              for b = 0, Nc - 1 do
                for c = 0, Nc - 1 do
                  for d = 0, Nc - 1 do
                    local A_PL = antiprop_k1 * (gammaList[1] * S_k2)
                    local A_PR = antiprop_k1 * (gammaList[2] * S_k2)
                    local A_muPL = {}
                    local A_muPR = {}
                    for mu = 0, #L - 1 do    -- gamma^mu PL is 3, 4, 5, 6 and gamma^mu PR is 7, 8, 9, 10
                      A_muPL[mu] = antiprop_k1 * (gammaList[3 + mu] * S_k2)
                      A_muPR[mu] = antiprop_k1 * (gammaList[7 + mu] * S_k2)
                    end

                    -- evaluate unprimed operators
                    G2[{alpha, beta, gamma, sigma, a, b, c, d}] = G2[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 *
                      (A_PL[{c=c, d=gamma}][{c=d, d=sigma}] * A_PL[{c=a, d=alpha}][{c=b, d=beta}] - A_PL[{c=c, d=gamma}][{c=b, d=beta}] * A_PL[{c=a, d=alpha}][{c=d, d=sigma}] +
                       A_PR[{c=c, d=gamma}][{c=d, d=sigma}] * A_PR[{c=a, d=alpha}][{c=b, d=beta}] - A_PR[{c=c, d=gamma}][{c=b, d=beta}] * A_PR[{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum()
                    for mu = 0, #L - 1 do
                      G1[{alpha, beta, gamma, sigma, a, b, c, d}] = G1[{alpha, beta, gamma, sigma, a, b, c, d}] + (qFT2 * (
                          A_muPL[mu][{c=c, d=gamma}][{c=d, d=sigma}] * A_muPR[mu][{c=a, d=alpha}][{c=b, d=beta}] - A_muPL[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPR[mu][{c=a, d=alpha}][{c=d, d=sigma}] +
                          A_muPR[mu][{c=c, d=gamma}][{c=d, d=sigma}] * A_muPL[mu][{c=a, d=alpha}][{c=b, d=beta}] - A_muPR[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPL[mu][{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum()
                      G3[{alpha, beta, gamma, sigma, a, b, c, d}] = G3[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 * (
                          A_muPL[mu][{c=c, d=gamma}][{c=d, d=sigma}] * A_muPL[mu][{c=a, d=alpha}][{c=b, d=beta}] - A_muPL[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPL[mu][{c=a, d=alpha}][{c=d, d=sigma}] +
                          A_muPR[mu][{c=c, d=gamma}][{c=d, d=sigma}] * A_muPR[mu][{c=a, d=alpha}][{c=b, d=beta}] - A_muPR[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPR[mu][{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum()
                    end

                    -- evaluate primed operators. First add on normal color contractions.
                    G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] - 2 * (qFT2 * (
                       A_PL[{c=c, d=gamma}][{c=b, d=beta}] * A_PL[{c=a, d=alpha}][{c=d, d=sigma}] + A_PR[{c=c, d=gamma}][{c=b, d=beta}] * A_PR[{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum()
                    for mu = 0, #L - 1 do
                      G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G1[{alpha, beta, gamma, sigma, a, b, c, d}] - (qFT2 * (
                          A_muPL[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPR[mu][{c=a, d=alpha}][{c=d, d=sigma}] + A_muPR[mu][{c=c, d=gamma}][{c=b, d=beta}] * A_muPL[mu][{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum()
                    end
                    -- now add on abnormal contractions
                    for m = 0, Nc - 1 do
                      for n = 0, Nc - 1 do
                        local A_PL_cmnd = L:Complex(complex(0, 0))
                        local A_PL_anmb = L:Complex(complex(0, 0))
                        local A_PR_cmnd = L:Complex(complex(0, 0))
                        local A_PR_anmb = L:Complex(complex(0, 0))
                        local g1Sk2 = gammaList[1] * S_k2
                        local g2Sk2 = gammaList[2] * S_k2
                        for rho = 0, Nd - 1 do
                          A_PL_cmnd = A_PL_cmnd + (antiprop_k1[{c=c, d=gamma}][{c=m, d=rho}]) * (g1Sk2[{c=n, d=rho}][{c=d, d=sigma}])
                          A_PL_anmb = A_PL_anmb + (antiprop_k1[{c=a, d=alpha}][{c=n, d=rho}]) * (g1Sk2[{c=m, d=rho}][{c=b, d=beta}])
                          A_PR_cmnd = A_PR_cmnd + (antiprop_k1[{c=c, d=gamma}][{c=m, d=rho}]) * (g2Sk2[{c=n, d=rho}][{c=d, d=sigma}])
                          A_PR_anmb = A_PR_anmb + (antiprop_k1[{c=a, d=alpha}][{c=n, d=rho}]) * (g2Sk2[{c=m, d=rho}][{c=b, d=beta}])
                        end
                        G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] +
                            2 * (qFT2 * (A_PL_cmnd * A_PL_anmb + A_PR_cmnd * A_PR_anmb)) : sum()

                        for mu = 0, #L - 1 do
                          local A_muPL_cmnd = L:Complex(complex(0, 0))
                          local A_muPL_anmb = L:Complex(complex(0, 0))
                          local A_muPR_cmnd = L:Complex(complex(0, 0))
                          local A_muPR_anmb = L:Complex(complex(0, 0))
                          local gmuLSk2 = gammaList[3 + mu] * S_k2
                          local gmuRSk2 = gammaList[7 + mu] * S_k2
                          for rho = 0, Nd - 1 do
                            A_muPL_cmnd = A_muPL_cmnd + (antiprop_k1[{c=c, d=gamma}][{c=m, d=rho}]) * (gmuLSk2[{c=n, d=rho}][{c=d, d=sigma}])
                            A_muPL_anmb = A_muPL_anmb + (antiprop_k1[{c=a, d=alpha}][{c=n, d=rho}]) * (gmuLSk2[{c=m, d=rho}][{c=b, d=beta}])
                            A_muPR_cmnd = A_muPR_cmnd + (antiprop_k1[{c=c, d=gamma}][{c=m, d=rho}]) * (gmuRSk2[{c=n, d=rho}][{c=d, d=sigma}])
                            A_muPR_anmb = A_muPR_anmb + (antiprop_k1[{c=a, d=alpha}][{c=n, d=rho}]) * (gmuRSk2[{c=m, d=rho}][{c=b, d=beta}])
                          end
                          G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] +
                            (qFT2 * (A_muPL_cmnd * A_muPR_anmb + A_muPR_cmnd * A_muPL_anmb)) : sum()
                        end

                      end
                    end

                  end
                end
              end
            end
          end
        end
      end
    end
    print("Done evaluating operators.")
    local G1path = string.format("G1/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local G2path = string.format("G2/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local G3path = string.format("G3/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local G1Ppath = string.format("G1prime/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local G2Ppath = string.format("G2prime/q%d%d%d%d", q[1], q[2], q[3], q[4])
    h5_force_write(writer, G1path, G1)
    h5_force_write(writer, G2path, G2)
    h5_force_write(writer, G3path, G3)
    h5_force_write(writer, G1Ppath, G1prime)
    h5_force_write(writer, G2Ppath, G2prime)
    printf("G1 written at: %s", G1path)
    printf("G2 written at: %s", G2path)
    printf("G3 written at: %s", G3path)
    printf("G1prime written at: %s", G1Ppath)
    printf("G2prime written at: %s", G2Ppath)
    --[[
    local Nc = S_k2:colors()
    local Nd = 4
    -- local L_A = qcd.lattice{Nd, Nd, Nc, Nc, Nc, Nc}
    local A = {}
    for idx = 0, #gammaList - 1 do
      local GammaS_k2 = gammaList[idx + 1] * S_k2
      -- A[idx] = L_A:Complex(complex(0, 0))
      A[idx] = {}
      for alpha = 0, Nd - 1 do
        A[idx][alpha] = {}
        for beta = 0, Nd - 1 do
          A[idx][alpha][beta] = {}
          for a = 0, Nc - 1 do
            A[idx][alpha][beta][a] = {}
            local prop1Ferm = antiprop_k1[{c=a, d=alpha}]
            for b = 0, Nc - 1 do
              A[idx][alpha][beta][a][b] = {}
              for c = 0, Nc - 1 do
                A[idx][alpha][beta][a][b][c] = {}
                for d = 0, Nc - 1 do
                  -- A[idx][{alpha, beta, a, b, c, d}] = complex(0, 0)
                  A[idx][alpha][beta][a][b][c][d] = L:Complex(complex(0, 0))
                  for gamma = 0, Nd - 1 do
                    local antiprop_comps = prop1Ferm[{c=b, d=gamma}]    -- components of antiprop_k1
                    local GammaS_k2_Ferm = GammaS_k2[{c=c, d=gamma}]
                    local GammaS_k2_comps = GammaS_k2_Ferm[{c=d, d=beta}]
                    -- A[idx][{alpha, beta, a, b, c, d}] = A[idx][{alpha, beta, a, b, c, d}] + antiprop_comps * GammaS_k2_comps
                    A[idx][alpha][beta][a][b][c][d] = A[idx][alpha][beta][a][b][c][d] + antiprop_comps * GammaS_k2_comps
                  end
                end
              end
            end
          end
        end
      end
    end
    print("A tensor generated.")

    -- Sort A tensor into gamma structures
    local AL = A[1]
    local AR = A[2]
    local AvecL = {A[3], A[4], A[5], A[6]}
    local AvecR = {A[7], A[8], A[9], A[10]}

    -- Get three point function
    local L_NPR = qcd.lattice{Nd, Nd, Nd, Nd, Nc, Nc, Nc, Nc}
    local G1 = L_NPR:Complex(complex(0, 0))
    local G2 = L_NPR:Complex(complex(0, 0))
    local G3 = L_NPR:Complex(complex(0, 0))
    local G1prime = L_NPR:Complex(complex(0, 0))
    local G2prime = L_NPR:Complex(complex(0, 0))
    for alpha = 0, Nd - 1 do
      for beta = 0, Nd - 1 do
        for gamma = 0, Nd - 1 do
          for sigma = 0, Nd - 1 do
            for a = 0, Nc - 1 do
              for b = 0, Nc - 1 do
                for c = 0, Nc - 1 do
                  for d = 0, Nc - 1 do
                    -- G1[{alpha, beta, gamma, sigma, a, b, c, d}] = complex(0, 0)
                    -- G2[{alpha, beta, gamma, sigma, a, b, c, d}] = complex(0, 0)
                    -- G3[{alpha, beta, gamma, sigma, a, b, c, d}] = complex(0, 0)
                    -- G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] = complex(0, 0)
                    -- G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] = complex(0, 0)
                    for m = 0, Nc - 1 do
                      for n = 0, Nc - 1 do
                        -- G2[{alpha, beta, gamma, sigma, a, b, c, d}] = G2[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 *
                        --   (AL[{gamma, sigma, c, m, m, d}] * AL[{alpha, beta, a, n, n, b}] - AL[{gamma, beta, c, m, m, b}] * AL[{alpha, sigma, a, n, n, d}] +
                        --    AR[{gamma, sigma, c, m, m, d}] * AR[{alpha, beta, a, n, n, b}] - AR[{gamma, beta, c, m, m, b}] * AR[{alpha, sigma, a, n, n, d}]
                        --   )) : sum()
                        -- G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G2[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 *
                        --   (AL[{gamma, sigma, c, m, n, d}] * AL[{alpha, beta, a, n, m, b}] - AL[{gamma, beta, c, m, m, b}] * AL[{alpha, sigma, a, n, n, d}] +
                        --    AR[{gamma, sigma, c, m, n, d}] * AR[{alpha, beta, a, n, m, b}] - AR[{gamma, beta, c, m, m, b}] * AR[{alpha, sigma, a, n, n, d}]
                        --   )) : sum()
                        G2[{alpha, beta, gamma, sigma, a, b, c, d}] = G2[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 *
                          (AL[gamma][sigma][c][m][m][d] * AL[alpha][beta][a][n][n][b] - AL[gamma][beta][c][m][m][b] * AL[alpha][sigma][a][n][n][d] +
                           AR[gamma][sigma][c][m][m][d] * AR[alpha][beta][a][n][n][b] - AR[gamma][beta][c][m][m][b] * AR[alpha][sigma][a][n][n][d]
                          )) : sum()
                        G2prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G2[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 *
                          (AL[gamma][sigma][c][m][n][d] * AL[alpha][beta][a][n][m][b] - AL[gamma][beta][c][m][m][b] * AL[alpha][sigma][a][n][n][d] +
                           AR[gamma][sigma][c][m][n][d] * AR[alpha][beta][a][n][m][b] - AR[gamma][beta][c][m][m][b] * AR[alpha][sigma][a][n][n][d]
                          )) : sum()
                        for mu = 1, #L do
                          -- G1[{alpha, beta, gamma, sigma, a, b, c, d}] = G1[{alpha, beta, gamma, sigma, a, b, c, d}] + (qFT2 * (
                          --     AvecL[mu][{gamma, sigma, c, m, m, d}] * AvecR[mu][{alpha, beta, a, n, n, d}] - AvecL[mu][{gamma, beta, c, m, m, b}] * AvecR[mu][{alpha, sigma, a, n, n, d}] +
                          --     AvecR[mu][{gamma, sigma, c, m, m, d}] * AvecL[mu][{alpha, beta, a, n, n, d}] - AvecR[mu][{gamma, beta, c, m, m, b}] * AvecL[mu][{alpha, sigma, a, n, n, d}]
                          -- )) : sum()
                          -- G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] + (qFT2 * (
                          --     AvecL[mu][{gamma, sigma, c, m, n, d}] * AvecR[mu][{alpha, beta, a, n, m, d}] - AvecL[mu][{gamma, beta, c, m, m, b}] * AvecR[mu][{alpha, sigma, a, n, n, d}] +
                          --     AvecR[mu][{gamma, sigma, c, m, n, d}] * AvecL[mu][{alpha, beta, a, n, m, d}] - AvecR[mu][{gamma, beta, c, m, m, b}] * AvecL[mu][{alpha, sigma, a, n, n, d}]
                          -- )) : sum()
                          -- G3[{alpha, beta, gamma, sigma, a, b, c, d}] = G3[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 * (
                          --     AvecL[mu][{gamma, sigma, c, m, m, d}] * AvecL[mu][{alpha, beta, a, n, n, d}] - AvecL[mu][{gamma, beta, c, m, m, b}] * AvecL[mu][{alpha, sigma, a, n, n, d}] +
                          --     AvecR[mu][{gamma, sigma, c, m, m, d}] * AvecR[mu][{alpha, beta, a, n, n, d}] - AvecR[mu][{gamma, beta, c, m, m, b}] * AvecR[mu][{alpha, sigma, a, n, n, d}]
                          -- )) : sum()
                          G1[{alpha, beta, gamma, sigma, a, b, c, d}] = G1[{alpha, beta, gamma, sigma, a, b, c, d}] + (qFT2 * (
                              AvecL[mu][gamma][sigma][c][m][m][d] * AvecR[mu][alpha][beta][a][n][n][d] - AvecL[mu][gamma][beta][c][m][m][b] * AvecR[mu][alpha][sigma][a][n][n][d] +
                              AvecR[mu][gamma][sigma][c][m][m][d] * AvecL[mu][alpha][beta][a][n][n][d] - AvecR[mu][gamma][beta][c][m][m][b] * AvecL[mu][alpha][sigma][a][n][n][d]
                          )) : sum()
                          G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] = G1prime[{alpha, beta, gamma, sigma, a, b, c, d}] + (qFT2 * (
                              AvecL[mu][gamma][sigma][c][m][n][d] * AvecR[mu][alpha][beta][a][n][m][d] - AvecL[mu][gamma][beta][c][m][m][b] * AvecR[mu][alpha][sigma][a][n][n][d] +
                              AvecR[mu][gamma][sigma][c][m][n][d] * AvecL[mu][alpha][beta][a][n][m][d] - AvecR[mu][gamma][beta][c][m][m][b] * AvecL[mu][alpha][sigma][a][n][n][d]
                          )) : sum()
                          G3[{alpha, beta, gamma, sigma, a, b, c, d}] = G3[{alpha, beta, gamma, sigma, a, b, c, d}] + 2 * (qFT2 * (
                              AvecL[mu][gamma][sigma][c][m][m][d] * AvecL[mu][alpha][beta][a][n][n][d] - AvecL[mu][gamma][beta][c][m][m][b] * AvecL[mu][alpha][sigma][a][n][n][d] +
                              AvecR[mu][gamma][sigma][c][m][m][d] * AvecR[mu][alpha][beta][a][n][n][d] - AvecR[mu][gamma][beta][c][m][m][b] * AvecR[mu][alpha][sigma][a][n][n][d]
                          )) : sum()
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    print("Done with evaluation of Greens functions.")
    ]]
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 24
Lt = 24

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
lqcd_dir = "/home/poare"

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = "/data/d10b/users/poare/0nubb/output"
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493    -- TODO change clover coefficient
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
    print("GPU Initialized.")
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
    print("CPU being used.")
end

print("Clover object initialized.")

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

print("Propagator object initialized.")

-- momenta to compute Z(p) at
local k1_list_NPR = {}
local k2_list_NPR = {}
print("Initializing momenta.")
for m = -6, 6 do
  local minusM = -m
  k1_list_NPR[#k1_list_NPR + 1] = {minusM, 0, m, 0}
  k2_list_NPR[#k2_list_NPR + 1] = {0, m, m, 0}
 end
--printf("Number of momenta to compute at: %d.", #k1_list_NPR)
print("Momenta initialized. Initializing Dirac matrices.")

-- init list of Dirac matrices
-- Problem with arithmetic: hack it by using id = gamma{n = 0}
local PL = (gamma{n = 0} - gamma{mu = 5}) / 2
local PR = (gamma{n = 0} + gamma{mu = 5}) / 2
local gammaList = {PL, PR}
for mu = 0, #L - 1 do
  gammaList[#gammaList + 1] = gamma{mu = mu} * PL
end
for mu = 0, #L - 1 do
  gammaList[#gammaList + 1] = gamma{mu = mu} * PR
end

print("Dirac matrices initialized")

-- local gauge_file = string.format(cfgpath..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", cfgnum)
local gauge_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
print("Reading gauge file at: %s\n", gauge_file)

status, U, finfo, info = pcall(load_conf, L, gauge_file)
if status then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  print("Gauge file read. Computing NPR.")
  compute_npr_momsource(L, U, ferm_prop, k1_list_NPR, k2_list_NPR, vol, group, clover, writer, gammaList)

  writer:close()
else
  printf("No gauge field configuration at %s.\n", gauge_file)
  logs_dir = string.format("%s/lqcd/0nubb/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
  print(U)
end

if gpu then
    qcd.quda.fini()
end
