#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function load_nersc(file_name, Lattice)
  local U, msg;
  U, msg = qcd.nersc.read_gauge(Lattice, file_name)
  printf("HEADER of %q BEGIN\n", file_name)
  for i, v in pairs(msg) do
    printf("  %s = %s\n", i, tostring(v))
  end
  printf("END of %q HEADER\n", file_name)
  return U
end

-- compute all color-unmixed bilinears with all gamma matrices.
-- function compute_npr_momsource_unmixed(L, U, solver, k1_list, k2_list, vol, writer, timer)
function compute_npr_momsource_unmixed(L, U, solver, k1_list, k2_list, vol, timer)
  local bvec = {0,0,0,0.5}
  print("Computing with momentum sources.")

  for kidx = 1, #k1_list do
    printf("p index: %d\n", kidx)
    local k1 = k1_list[kidx]
    local k2 = k2_list[kidx]
    local q = {}
    for mu = 0, #L - 1 do
        q[mu + 1] = k2[mu + 1] - k1[mu + 1]
      end
    printf("k1 is (%d, %d, %d, %d), k2 is (%d, %d, %d, %d), q is (%d, %d, %d, %d).", k1[1], k1[2], k1[3], k1[4],
              k2[1], k2[2], k2[3], k2[4], q[1], q[2], q[3], q[4])
    local qFTarg = L:Real(0)
    local mqFTarg = L:Real(0)
    local mqFTarg_nobvec = L:Real(0)
    local mqFT2arg = L:Real(0)    -- Likely no bvec on qFT2arg; if it looks really weird then add bvec to it.
    local k1FTarg = L:Real(0)
    local k2FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      qFTarg = qFTarg + L:Real(L:pcoord(mu)) * (q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      mqFTarg = mqFTarg + L:Real(L:pcoord(mu)) * (-q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      mqFTarg_nobvec = mqFTarg_nobvec - L:Real(L:pcoord(mu)) * q[mu + 1] * 2 * math.pi / L[mu]
      mqFT2arg = mqFT2arg - L:Real(L:pcoord(mu)) * (2 * q[mu + 1]) * 2 * math.pi / L[mu]
      k1FTarg = k1FTarg + L:Real(L:pcoord(mu)) * (k1[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      k2FTarg = k2FTarg + L:Real(L:pcoord(mu)) * (k2[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local qFT = qFTarg:expi()
    local mqFT = mqFTarg:expi()
    local mqFT_nobvec = mqFTarg_nobvec:expi()
    local mqFT2_nobvec = mqFT2arg:expi()
    local k1FT = k1FTarg:expi()
    local k2FT = k2FTarg:expi()

    -- Write k1 and k2 to file and make a map q <--> k1, k2. Might have errors since k1 / k2 aren't lattice fields.
    -- local L_vec = qcd.lattice{4}
    -- local k1_lat = L_vec:Int(0)
    -- local k2_lat = L_vec:Int(0)
    -- for mu = 0, #L - 1 do
    --   k1_lat[{mu}] = k1[mu + 1]
    --   k2_lat[{mu}] = k2[mu + 1]
    -- end
    -- local k1_path = string.format("moms/q%d%d%d%d/k1", q[1], q[2], q[3], q[4])
    -- local k2_path = string.format("moms/q%d%d%d%d/k2", q[1], q[2], q[3], q[4])
    -- h5_force_write(writer, k1_path, k1_lat)
    -- h5_force_write(writer, k2_path, k2_lat)

    local srck1 = compute_spacetime_wall_source_antiperiodicBC(U, k1)
    -- local srck2 = compute_spacetime_wall_source_antiperiodicBC(U, k2)
    -- local srcq = compute_spacetime_wall_source_antiperiodicBC(U, q)

    -- COMPUTE PROPAGATORS
    print("Inverting propagators.")
    timer()
    local S_k1 = solver(srck1)
    print("Propagator k1 inverted.")
    timer()
    -- local S_k2 = solver(srck2)
    -- print("Propagator k2 inverted.")
    -- timer()
    -- local S_q = solver(srcq)
    -- print("Inversions done")
    -- timer()

    -- local mom4_prop_k1 = (k1FT * S_k1):sum() / vol
    -- local mom4_prop_k2 = (k2FT * S_k2):sum() / vol
    -- local mom4_prop_q = (qFT * S_q):sum() / vol

    -- TODO this is only for the test, since I want it to run in a reasonable amount of time to see how fast it is.
    local antiprop_k1 = gamma{mu = 5} * S_k1:adjoin() * gamma{mu = 5}
    -- local antiprop_k2 = gamma{mu = 5} * S_k2:adjoin() * gamma{mu = 5}

    -- Write momentum projected propagator to file
    -- local prop_path_k1 = string.format("prop_k1/q%d%d%d%d", q[1], q[2], q[3], q[4])
    -- local prop_path_k2 = string.format("prop_k2/q%d%d%d%d", q[1], q[2], q[3], q[4])
    -- local prop_path_q = string.format("prop_q/q%d%d%d%d", q[1], q[2], q[3], q[4])
    -- h5_force_write(writer, prop_path_k1, mom4_prop_k1)
    -- h5_force_write(writer, prop_path_k2, mom4_prop_k2)
    -- h5_force_write(writer, prop_path_q, mom4_prop_q)
    -- printf("Propagator for momentum k1 written at path: %s\n", prop_path_k1)
    -- printf("Propagator for momentum k2 written at path: %s\n", prop_path_k2)
    -- printf("Propagator for momentum q written at path: %s\n", prop_path_q)

    -- Get four point function for unprimed operators
    print("Evaluating four point functions.")
    timer()
    local Nc = S_k1:colors()
    local Nd = 4
    local L_NPR = qcd.lattice{Nd, Nd, Nd, Nd, Nc, Nc, Nc, Nc}
    local m = 6    -- choose a random m index for testing
    local G = L_NPR:Complex(complex(0, 0))    -- BUG WAS HERE: accidentally didn't re-initialize G^(n) each time we looped.
    -- local A_gamma = antiprop_k2 * (gamma{n=m} * S_k1)
    -- Using only k1 propagator to make timing more manageable
    local A_gamma = antiprop_k1 * (gamma{n=m} * S_k1)
    for alpha = 0, Nd - 1 do
      print(alpha)
      timer()
      for beta = 0, Nd - 1 do
        for rho = 0, Nd - 1 do
          for sigma = 0, Nd - 1 do
            for a = 0, Nc - 1 do
              for b = 0, Nc - 1 do
                for c = 0, Nc - 1 do
                  for d = 0, Nc - 1 do
                    G[{alpha, beta, rho, sigma, a, b, c, d}] = G[{alpha, beta, rho, sigma, a, b, c, d}] + 2 * (mqFT2_nobvec * (
                      A_gamma[{c=c, d=rho}][{c=d, d=sigma}] * A_gamma[{c=a, d=alpha}][{c=b, d=beta}] - A_gamma[{c=c, d=rho}][{c=b, d=beta}] * A_gamma[{c=a, d=alpha}][{c=d, d=sigma}]
                    )) : sum() / vol
                  end
                end
              end
            end
          end
        end
      end
    end
    print("Four point functions evaluated.")
    timer()
    -- write to file here
    -- local Gpath = string.format("Gn%d/q%d%d%d%d", m, q[1], q[2], q[3], q[4])
    -- h5_force_write(writer, Gpath, G)
    -- printf("Gn%d written at: %s", m, Gpath)
    -- print("Done evaluating operators.")
  end
end


------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- cfgpath = "/home/poare/lqcd/0nubb/tests/runtime_test/configs/"
-- cfgbase = "2+1f_24nt64_IWASAKI_b2.13_ls16_M1.8_ms0.04_mu0.005"

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 24
Lt = 64
Ls = 16

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)
-- beta = 2.13
M = 1.8
ml = 0.005
-- ms = 0.04

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
filename = string.format("%s/job%d.h5", out_folder, jobid)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua
local bcs = {1, 1, 1, -1}

-- momenta to compute Z(p) at
print("Initializing momenta.")
local k1_list_NPR = { {-1, 0, 1, 0} }
local k2_list_NPR = { {0, 1, 1, 0} }

local gauge_file = string.format(cfgpath..cfgbase.."/ckpoint_lat.IEEE64BIG.%d", cfgnum)
print("Reading gauge file at: %s\n", gauge_file)
local U = load_nersc(gauge_file, L)

print("Initializing solver.")
local DWF = qcd.MDWF.Shamir(U, bcs, Ls, M, ml, 1.0)
local solver = DWF:mixed_solver(1e-10, 5000, 1e-20, 50000)

-- project gauge configuration onto SU(3)
for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

-- initialize timer
local timer = create_timer("runtime")

-- Open file writer
-- local hdf5params = { method = "phdf5" }
-- local writer = qcd.hdf5.Writer(filename, hdf5params)
print("Computing vector / axial three point functions and all color-unmixed bilinears.")
-- compute_npr_momsource_unmixed(L, U, solver, k1_list_NPR, k2_list_NPR, vol, writer, timer)
compute_npr_momsource_unmixed(L, U, solver, k1_list_NPR, k2_list_NPR, vol, timer)

print("Done.")
timer()
-- writer:close()
