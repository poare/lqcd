require "stdlib"
require "lib/fermion" 
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator" 
require "lib/baryon_blocks"
require "lib/baryon_weights"
require "lib/quda"

local Lsparse = 2
local coarse_fac = 1
local Lfine = Lsparse*coarse_fac
local Lt = 2
local Vsnk = Lsparse^3
local Vsrc = Lsparse^3
local L = qcd.lattice{Lfine,Lfine,Lfine,Lt}
local Nc = 3
local Ns = 2
printf("geometry: Vsrc = %d, Vsnk = %d \n", Vsrc, Vsnk)

local p_list = {{0,0,0}, {0,0,1*(2*math.pi/Lfine)}, {0,0,2*(2*math.pi/Lfine)}}
local pnames = {0, 1, 2}
local k1_list = {{0,0,0}, {0,0,1*(2*math.pi/Lfine)}, {0,0,2*(2*math.pi/Lfine)}, {0,0,3*(2*math.pi/Lfine)}}
local k2_list = {{0,0,0}, {0,0,-1*(2*math.pi/Lfine)}, {0,0,-2*(2*math.pi/Lfine)}, {0,0,-3*(2*math.pi/Lfine)}}
local Nsrc = #k1_list
local NsrcHex = 1
local Nsnk = #k1_list
local NsnkHex = 1
printf("interpolators (%d + %d) x (%d + %d) \n ", Nsrc, NsrcHex, Nsnk, NsnkHex)

local bcs = {}
for d = 1,#L-1 do
   bcs[d] = 1
end
bcs[#L] = 1
local mq = 0.5
local kappa = 1.0/(2*(#L+mq))
local csw = 1.0
local beta = 10.0
local u0 = 1.0
local src_t = 0
local link_rho = 0
local link_n_smear = 0
local eps = 1
local n_smear = 0
local p_smear = {0,0,0}
local group = group.get(Nc)
local seqRnd, latRnd = make_seq_and_lat_rnds(1234, #L)
local U = {}
for mu = 0, #L-1 do
   U[mu+1] = group.exp(complex(0,0)*L:ColorMatrixN(Nc))
end
--init_weak_field(L, latRnd, group, Nc, U)
local clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
local clover_prop = propagator.make_from_ferm(clover, 1e-12, 1000)
local all_props = compute_coarse_all_to_coarse_all_propagator(U, clover_prop, coarse_fac, link_rho, link_n_smear, eps, n_smear, bcs, p_smear, src_t)
local dirac_all_props = convert_ca2a_props_to_Dirac_basis(all_props, L[#L-1]/2, false)
printf("built dirac prop \n")


local hdf5params = { method = "phdf5" }
local database = "test_qblocks.h5"
printf("writing to "..database.."\n")

for pInd=1,#p_list do
   p = p_list[pInd]
   local L_space = qcd.lattice{Lsparse,Lsparse,Lsparse}
   -- one nucleons
   local src_psi = {}
   local snk_psi = {}
   for i=1,1 do
      src_psi[i] = {}
      for y=1,Vsrc do
        local y2 = y % Lsparse;
        local y1 = ((y - y2)/Lsparse) % Lsparse;
        local y0 = (y - y1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local src_FT_arg = -1.0*(p[1]*y0 + p[2]*y1 + p[3]*y2) * coarse_fac
        src_psi[i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
      end
   end
   local snk_FT_arg = L_space:Real(0)
   for mu = 0, #L_space - 1 do
      snk_FT_arg = snk_FT_arg + L_space:Real(L_space:pcoord(mu)) * p[mu+1] * coarse_fac
   end
   local snk_FT = snk_FT_arg:expi() 
   for i=1,1 do
      snk_psi[i] = snk_FT
   end
   local baryon_all_props = {}
   for a = 0, Nc-1 do
      baryon_all_props[a+1] = dirac_all_props
   end
   local nuc_timer = create_timer("qblocks nucleons")
   local block_proton_corr = blocks.nucleon_2pt(baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, src_psi, snk_psi, Ns)
   nuc_timer()
   for t=0, Lt/2-1 do
      printf("nucleon_r1[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, block_proton_corr[1][1][1][t]:real(), block_proton_corr[1][1][1][t]:imag() )
   end
   for t=0, Lt/2-1 do
      printf("nucleon_r2[p=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], t, block_proton_corr[2][1][1][t]:real(), block_proton_corr[2][1][1][t]:imag() )
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, 1 do
      for n = 1, 1 do
         for t = 0, Lt/2 - 1 do
            h5_force_write(h5_writer, string.format("B1_G1g_r1_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_proton_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B1_G1g_r2_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_proton_corr[2][m][n][t])
         end
      end
   end
   h5_writer:close()
   -- two nucleons
   local L_big = qcd.lattice{Lsparse,Lsparse,Lsparse,Lsparse,Lsparse,Lsparse}
   local L_space = qcd.lattice{Lsparse,Lsparse,Lsparse}
   local L_fine = qcd.lattice{Lfine,Lfine,Lfine}
   local B1_src_psi = {}
   local B2_src_psi = {}
   local B1_snk_one_psi = {}
   local B2_snk_one_psi = {}
   local snk_psi = {}
   for i=1,Nsrc do
      B1_src_psi[i] = {}
      B2_src_psi[i] = {}
      for y=1,Vsrc do
        local y2 = y % Lsparse;
        local y1 = ((y - y2)/Lsparse) % Lsparse;
        local y0 = (y - y1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local src_FT_arg = -1.0*((p[1]+k1_list[i][1])*y0 + (p[2]+k1_list[i][2])*y1 + (p[3]+k1_list[i][3])*y2) * coarse_fac
        B1_src_psi[i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
        local src_FT_arg = -1.0*((p[1]+k2_list[i][1])*y0 + (p[2]+k2_list[i][2])*y1 + (p[3]+k2_list[i][3])*y2) * coarse_fac
        B2_src_psi[i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
      end
   end
   for i=1,Nsnk do
     B1_snk_one_psi[i] = {}
     B2_snk_one_psi[i] = {}
     for x=1,Vsnk do
        local x2 = x % Lsparse;
        local x1 = ((x - x2)/Lsparse) % Lsparse;
        local x0 = (x - x1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local snk_FT_arg = 1.0*((p[1]+k1_list[i][1])*x0 + (p[2]+k1_list[i][2])*x1 + (p[3]+k1_list[i][3])*x2) * coarse_fac
        B1_snk_one_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
        local snk_FT_arg = 1.0*((p[1]+k2_list[i][1])*x0 + (p[2]+k2_list[i][2])*x1 + (p[3]+k2_list[i][3])*x2) * coarse_fac
        B2_snk_one_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
     end
   end
   local big_I1 = {}
   local big_I2 = {}
   for mu = 0, #L-2 do
      big_I1[mu+1] = L_big:pcoord(mu)
      big_I2[mu+1] = L_big:pcoord(#L-1+mu)
   end
   local big_I1_scatter = qcd.scatter(L_big, L_space, big_I1)
   local big_I2_scatter = qcd.scatter(L_big, L_space, big_I2)
   local coarseI = {}
   for mu = 0, #L - 2 do
      coarseI[mu+1] = L_space:pcoord(mu) * coarse_fac
   end
   local coarse_scatter = qcd.scatter(L_space, L_fine, coarseI)
   for i=1,Nsnk do
      local snk_FT_arg = L_fine:Real(0)
      for mu = 0, #L - 2 do
         snk_FT_arg = snk_FT_arg + L_fine:Real(L_fine:pcoord(mu)) * (p[mu+1]+k1_list[i][mu+1])
      end
      local snk_FT_1 = coarse_scatter(snk_FT_arg:expi())
      local snk_FT_arg = L_fine:Real(0)
      for mu = 0, #L - 2 do
         snk_FT_arg = snk_FT_arg + L_fine:Real(L_fine:pcoord(mu)) * (p[mu+1]+k2_list[i][mu+1])
      end
      local snk_FT_2 = coarse_scatter(snk_FT_arg:expi())
      snk_psi[i] = 1/2*(big_I1_scatter(snk_FT_1) * big_I2_scatter(snk_FT_2) + big_I1_scatter(snk_FT_2) * big_I2_scatter(snk_FT_1))
   end
   local hex_src_psi = {}
   local hex_snk_psi = {}
   for i=1,NsrcHex do
      hex_src_psi[i] = {}
      for y=1,Vsrc do
        local y2 = y % Lsparse;
        local y1 = ((y - y2)/Lsparse) % Lsparse;
        local y0 = (y - y1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local src_FT_arg = -1.0*(p[1]*y0 + p[2]*y1 + p[3]*y2) * coarse_fac
        hex_src_psi[i][y] = complex(math.cos(src_FT_arg), math.sin(src_FT_arg))
      end
   end
   for i=1,NsnkHex do
      hex_snk_psi[i] = {}
      for x=1,Vsnk do
        local x2 = x % Lsparse;
        local x1 = ((x - x2)/Lsparse) % Lsparse;
        local x0 = (x - x1*Lsparse - Lsparse)/(Lsparse*Lsparse);
        local snk_FT_arg = 1.0*(p[1]*x0 + p[2]*x1 + p[3]*x2) * coarse_fac
        hex_snk_psi[i][x] = complex(math.cos(snk_FT_arg), math.sin(snk_FT_arg))
      end
   end
   local space_symmetric = 0
   local snk_entangled = 0
   printf("built wavefunctions \n")
   local all_perms, all_sigs
   local perms = {}
   local sigs = {}
   local flavor_list = {{1, 3, 5}, {2, 4, 6}}
   all_perms, all_sigs = two_flavor_perms(flavor_list)
   local permnum = 0;
   for i=1,#all_perms do
      perms[i] = {}
      if ((all_perms[i][1] < all_perms[i][3]) and (all_perms[i][4] < all_perms[i][6])) then 
         permnum = permnum + 1
         for q=1,2*Nc do
            perms[permnum][q] = all_perms[i][q]
         end
         sigs[permnum] = all_sigs[i]
      end
   end
   printf("built perms \n")
   local two_baryon_all_props = {}
   for a = 0, 2*Nc-1 do
      two_baryon_all_props[a+1] = dirac_all_props
   end
   local two_nuc_timer = create_timer("qblocks two nucleons")
   local block_dinucleon_corr = blocks.two_nucleon_2pt(two_baryon_all_props, B1_G1g_r1_color_weights, B1_G1g_r1_spin_weights, B1_G1g_r1_weights_weights, B1_G1g_r2_color_weights, B1_G1g_r2_spin_weights, B1_G1g_r2_weights_weights, perms, sigs, B1_src_psi, B2_src_psi, snk_psi, B1_snk_one_psi, B2_snk_one_psi, hex_src_psi, hex_snk_psi, space_symmetric, snk_entangled, Ns)
   two_nuc_timer()
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, Lt/2 - 1 do
            printf("deuteron_r1[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, block_dinucleon_corr[2][m][n][t]:real(), block_dinucleon_corr[2][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, Lt/2 - 1 do
            printf("deuteron_r2[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, block_dinucleon_corr[3][m][n][t]:real(), block_dinucleon_corr[3][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, Lt/2 - 1 do
            printf("deuteron_r3[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, block_dinucleon_corr[4][m][n][t]:real(), block_dinucleon_corr[4][m][n][t]:imag() )
         end
      end
   end
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, Lt/2 - 1 do
            printf("dinucleon[p=%d,m=%d,n=%d,t=%d] = %4.9e + I %4.9e \n", pnames[pInd], m, n, t, block_dinucleon_corr[1][m][n][t]:real(), block_dinucleon_corr[1][m][n][t]:imag() )
         end
      end
   end
   local h5_writer = qcd.hdf5.Writer(database, hdf5params)
   for m = 1, Nsrc+NsrcHex do
      for n = 1, Nsnk+NsnkHex do
         for t = 0, Lt/2 - 1 do
            h5_force_write(h5_writer, string.format("B2_A1g_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_dinucleon_corr[1][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r1_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_dinucleon_corr[2][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r2_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_dinucleon_corr[3][m][n][t])
            h5_force_write(h5_writer, string.format("B2_T1g_r3_p%d/src%dsnk%dt%d", pnames[pInd],m,n,t), block_dinucleon_corr[4][m][n][t])
         end
      end
   end
   h5_writer:close()
end
