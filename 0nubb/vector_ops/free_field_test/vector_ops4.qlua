#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function init_id_field(L)
  local U = {}
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu+1] = (A*complex(0,1)):exp()
  end
  return U
end

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function load_nersc(file_name, Lattice)
  local U, msg;
  U, msg = qcd.nersc.read_gauge(Lattice, file_name)
  printf("HEADER of %q BEGIN\n", file_name)
  for i, v in pairs(msg) do
    printf("  %s = %s\n", i, tostring(v))
  end
  printf("END of %q HEADER\n", file_name)
  return U
end

--[[
 For each momenta pair (k1, k2), computes (for q = k2 - k1):
 1. Mom-projected propagator S(q)
 2. Three point function for vector operator GV = gamma{mu = mu}
 3. Three point function for axial operator GA = gamma{mu = mu} * gamma{mu = 5}
 4. Three point function for operators V1, V2, V3, V4 used in 0nubb. Note that we first Fierz the indices on the operators to 
  make the contractions faster. 
]]
function compute_npr_momsource_unmixed(L, U, solver, k1_list, k2_list, op_list, lbl_list, vol, writer)
  local bvec = {0,0,0,0.5}
  print("Computing with momentum sources.")

  for kidx = 1, #k1_list do
    printf("p index: %d\n", kidx)
    local k1 = k1_list[kidx]
    local k2 = k2_list[kidx]
    local q = {}
    for mu = 0, #L - 1 do
        q[mu + 1] = k2[mu + 1] - k1[mu + 1]
      end
    printf("k1 is (%d, %d, %d, %d), k2 is (%d, %d, %d, %d), q is (%d, %d, %d, %d).", k1[1], k1[2], k1[3], k1[4],
              k2[1], k2[2], k2[3], k2[4], q[1], q[2], q[3], q[4])
    local qFTarg = L:Real(0)
    local mqFTarg = L:Real(0)
    local mqFTarg_nobvec = L:Real(0)
    local mqFT2arg = L:Real(0)    -- Likely no bvec on qFT2arg; if it looks really weird then add bvec to it.
    local k1FTarg = L:Real(0)
    local k2FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      qFTarg = qFTarg + L:Real(L:pcoord(mu)) * (q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      mqFTarg = mqFTarg + L:Real(L:pcoord(mu)) * (-q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      mqFTarg_nobvec = mqFTarg_nobvec - L:Real(L:pcoord(mu)) * q[mu + 1] * 2 * math.pi / L[mu]
      mqFT2arg = mqFT2arg - L:Real(L:pcoord(mu)) * (2 * q[mu + 1]) * 2 * math.pi / L[mu]
      k1FTarg = k1FTarg + L:Real(L:pcoord(mu)) * (k1[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      k2FTarg = k2FTarg + L:Real(L:pcoord(mu)) * (k2[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local qFT = qFTarg:expi()
    local mqFT = mqFTarg:expi()
    local mqFT_nobvec = mqFTarg_nobvec:expi()
    local mqFT2_nobvec = mqFT2arg:expi()
    local k1FT = k1FTarg:expi()
    local k2FT = k2FTarg:expi()

    -- Write k1 and k2 to file and make a map q <--> k1, k2. Might have errors since k1 / k2 aren't lattice fields.
    local L_vec = qcd.lattice{4}
    local k1_lat = L_vec:Int(0)
    local k2_lat = L_vec:Int(0)
    for mu = 0, #L - 1 do
      k1_lat[{mu}] = k1[mu + 1]
      k2_lat[{mu}] = k2[mu + 1]
    end
    local k1_path = string.format("moms/q%d%d%d%d/k1", q[1], q[2], q[3], q[4])
    local k2_path = string.format("moms/q%d%d%d%d/k2", q[1], q[2], q[3], q[4])
    h5_force_write(writer, k1_path, k1_lat)
    h5_force_write(writer, k2_path, k2_lat)

    local srck1 = compute_spacetime_wall_source_antiperiodicBC(U, k1)
    local srck2 = compute_spacetime_wall_source_antiperiodicBC(U, k2)
    local srcq = compute_spacetime_wall_source_antiperiodicBC(U, q)

    -- COMPUTE PROPAGATORS
    print("Inverting propagators.")
    local S_k1 = compute_propagator(U, solver, srck1)
    local S_k2 = compute_propagator(U, solver, srck2)
    local S_q = compute_propagator(U, solver, srcq)

    local mom4_prop_k1 = (k1FT * S_k1):sum() / vol
    local mom4_prop_k2 = (k2FT * S_k2):sum() / vol
    local mom4_prop_q = (qFT * S_q):sum() / vol

    -- local antiprop_k1 = gamma{mu = 5} * S_k1:adjoin() * gamma{mu = 5}
    local antiprop_k2 = gamma{mu = 5} * S_k2:adjoin() * gamma{mu = 5}

    -- Write momentum projected propagator to file
    local prop_path_k1 = string.format("prop_k1/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local prop_path_k2 = string.format("prop_k2/q%d%d%d%d", q[1], q[2], q[3], q[4])
    local prop_path_q = string.format("prop_q/q%d%d%d%d", q[1], q[2], q[3], q[4])
    h5_force_write(writer, prop_path_k1, mom4_prop_k1)
    h5_force_write(writer, prop_path_k2, mom4_prop_k2)
    h5_force_write(writer, prop_path_q, mom4_prop_q)
    printf("Propagator for momentum k1 written at path: %s\n", prop_path_k1)
    printf("Propagator for momentum k2 written at path: %s\n", prop_path_k2)
    printf("Propagator for momentum q written at path: %s\n", prop_path_q)

    -- Vector and axial currents.
    for mu = 0, #L - 1 do
      local GV = (mqFT_nobvec * antiprop_k2 * (gamma{mu = mu} * S_k1)):sum() / vol
      local GA = (mqFT_nobvec * antiprop_k2 * ((gamma{mu = mu} * gamma{mu = 5}) * S_k1)):sum() / vol
      local op_path_V = string.format("GV%d/q%d%d%d%d", mu + 1, q[1], q[2], q[3], q[4])
      local op_path_A = string.format("GA%d/q%d%d%d%d", mu + 1, q[1], q[2], q[3], q[4])
      h5_force_write(writer, op_path_V, GV)
      h5_force_write(writer, op_path_A, GA)
      printf("Matrix element GV%d written at: %s\n", mu + 1, op_path_V)
      printf("Matrix element GA%d written at: %s\n", mu + 1, op_path_A)
    end

    -- Get three point function for unprimed operators
    print("Evaluating three point functions.")
    local Nc = S_k2:colors()
    local Nd = 4
    local L_NPR = qcd.lattice{Nd, Nd, Nd, Nd, Nc, Nc, Nc, Nc}
    local G
    for m = 1, #op_list do
      print("Evaluating correlator for %s.", lbl_list[m])
      G = L_NPR:Complex(complex(0, 0))
      local Gammas = op_list[m]
      local A_Gamma1 = antiprop_k2 * (Gammas[1] * S_k1)
      local A_Gamma2 = antiprop_k2 * (Gammas[2] * S_k1)
      for alpha = 0, Nd - 1 do
        for beta = 0, Nd - 1 do
          for rho = 0, Nd - 1 do
            for sigma = 0, Nd - 1 do
              for a = 0, Nc - 1 do
                for b = 0, Nc - 1 do
                  for c = 0, Nc - 1 do
                    for d = 0, Nc - 1 do
                      G[{alpha, beta, rho, sigma, a, b, c, d}] = G[{alpha, beta, rho, sigma, a, b, c, d}] + (mqFT2_nobvec * (
                        A_Gamma1[{c=c, d=rho}][{c=d, d=sigma}] * A_Gamma2[{c=a, d=alpha}][{c=b, d=beta}] - A_Gamma1[{c=c, d=rho}][{c=b, d=beta}] * A_Gamma2[{c=a, d=alpha}][{c=d, d=sigma}]
                        + A_Gamma2[{c=c, d=rho}][{c=d, d=sigma}] * A_Gamma1[{c=a, d=alpha}][{c=b, d=beta}] - A_Gamma2[{c=c, d=rho}][{c=b, d=beta}] * A_Gamma1[{c=a, d=alpha}][{c=d, d=sigma}]
                      )) : sum() / vol
                    end
                  end
                end
              end
            end
          end
        end
      end
      -- write to file here
      local Gpath = string.format("%s/q%d%d%d%d", lbl_list[m], q[1], q[2], q[3], q[4])
      h5_force_write(writer, Gpath, G)
      printf("%s written at: %s", lbl_list[m], Gpath)
    end
    print("Done evaluating operators.")
  end
end


------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 32
Lt = 48

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
lqcd_dir = "/home/lqcd/poare"

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = "/work/lqcd/d20b/users/poare/0nubb/vector_ops/meas"
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d_4.h5", out_folder, cfgnum)

-- FOR TESTING 0 MODE AGAINST RI'-MOM
-- out_folder = string.format("%s/%s_test0mode_%d", folder, cfgbase, jobid)
-- filename = string.format("%s/0nubb_output/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local bcs = {1, 1, 1, -1}

-- momenta to compute Z(p) at
local k1_list_NPR = {}
local k2_list_NPR = {}
print("Initializing momenta.")
-- for m = 1, 6 do
-- for m = 7, 10 do
for m = 2, 3 do
  local minusM = -m
  k1_list_NPR[#k1_list_NPR + 1] = {minusM, 0, m, 0}
  k2_list_NPR[#k2_list_NPR + 1] = {0, m, m, 0}
 end

-- Operators to compute RCs of. Note that gamma{n = 0} is the identity. 
local op_list = {
  {gamma{mu = 2} * gamma{n = 15}, gamma{mu = 3} * gamma{mu = 0}},
  {gamma{mu = 3} * gamma{n = 15}, gamma{mu = 2} * gamma{mu = 0}},
  {gamma{mu = 0} * gamma{n = 15}, gamma{mu = 1} * gamma{mu = 3}},     -- \epsilon^{2\nu\alpha\beta} A^\nu T^{\alpha\beta}
  {gamma{mu = 1} * gamma{n = 15}, gamma{mu = 3} * gamma{mu = 0}},
  {gamma{mu = 3} * gamma{n = 15}, gamma{mu = 0} * gamma{mu = 1}},
  {gamma{mu = 0} * gamma{n = 15}, gamma{mu = 2} * gamma{mu = 1}},     -- \epsilon^{3\nu\alpha\beta} A^\nu T^{\alpha\beta}
  {gamma{mu = 1} * gamma{n = 15}, gamma{mu = 0} * gamma{mu = 2}},
  {gamma{mu = 2} * gamma{n = 15}, gamma{mu = 1} * gamma{mu = 0}}
}

local lbl_list = {
  "A2T30", "A3T20", "A0T13", "A1T30", 
  "A3T01", "A0T21", "A1T02", "A2T10"
}

printf("Computing %d gamma matrix correlators.", #op_list)

-- FOR TESTING PURPOSES ONLY, MAKE SURE THIS AGREES WITH RI'-MOM AT MOMENTA 0
-- local k1_list_NPR = {{0, 0, 0, 0}}
-- local k2_list_NPR = {{0, 0, 0, 0}}

print("Initializing solver.")
if gpu then
  print("Using GPU.")
  qcd.quda.init(L)
end

local csw = 1
local clover
if gpu then
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end
local solver = propagator.make_from_ferm(clover, 1e-20, 1000)

local U = init_id_field(L)
print("Initialized free field.")

-- project gauge configuration onto SU(3)
for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

-- Open file writer
local hdf5params = { method = "phdf5" }
local writer = qcd.hdf5.Writer(filename, hdf5params)

print("Computing vector / axial three point functions and all color-unmixed bilinears.")
compute_npr_momsource_unmixed(L, U, solver, k1_list_NPR, k2_list_NPR, op_list, lbl_list, vol, writer)

writer:close()

if gpu then
    qcd.quda.fini()
end
