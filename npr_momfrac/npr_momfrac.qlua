require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function initGaugeFieldLime(L, path, cfgbase, configNum, gf, ec)
  if gf then
    fileName = string.format(path..cfgbase.."/cfgs_gf/"..cfgbase.."_gf.lime%d", configNum)
  elseif ec then
    fileName = string.format(path..cfgbase.."/cfgs/%d/"..cfgbase.."-%d_cfg_%d.lime", ec, ec, configNum)
  else
    fileName = string.format(path..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", configNum)
  end
  print(fileName .. "\n")
  reader, rinfo = qcd.qdpc.Reader(L, fileName)
  U, uInfo = reader:ColorMatrix(#L)
  return U
end

function compute_npr(L, U, ferm_prop, p_list, hypervolume, L_mom, writer)
  local bvec = {0,0,0,0.5}

  for pidx = 1, #p_list do
    p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- what does spacetime_wall_source do? Source with definite momentum?
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)
    local anti_prop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    h5_force_write(h5_writer, "prop/p"..tostring(p[1])..tostring(p[2])..tostring(p[3])..tostring(p[4]), mom4_prop)

    -- invert prop to amputate vertex function legs

    -- compute momentum projected Green's function G(p)

    -- Amputate legs to get vertex function \Gamma(p)

    -- Compute quark field renormalization

    -- Compute \Gamma_{Born}(p)

    -- Compute operator renormalization Z(p)
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    error("Must enter jobid, cfgpath, and cfgbase.\n")
end

if mq then
    kappa = 1 / (2 * mq + 8)
end

if Lx and Lt and beta and kappa then
    printf("Numerical parameters:\nLattice size: (%d, %d, %d, %d).\nBeta: %f.\nKappa: %f.\n", Lx, Lx, Lx, Lt, beta, kappa)
else
    error("Numerical parameters must be entered: Lx, Lt, beta, mq or kappa.\n")
end

-- Set parameters
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is

volume = 1    -- spatial volume
for i = 0, #L - 2 do
  volume = volume * L[i]
end
hypervolume = volume * L[3]

-- Paths to output file.
folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local csw = 1
local bcs = {1,1,1,-1}
local clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

--TODO what is eta?

-- momenta to compute Z(p) at
local p_list_NPR = {{2,2,2,2},{2,2,2,4},{2,2,2,6},{3,3,3,2},{3,3,3,4},{3,3,3,6},{3,3,3,8},{4,4,4,4},{4,4,4,6},{4,4,4,8}}

status, U = pcall(initGaugeFieldLime, L, cfgpath, cfgbase, cfgnum, gf, ec)
if status then
  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  compute_npr(L, U, ferm_prop, p_list_NPR, hypervolume, L_mom, writer)

  writer:close()
else
  printf("No gauge field configuration at %s.\n", cfgpath..cfgbase)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
end
