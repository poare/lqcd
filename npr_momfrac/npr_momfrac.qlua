require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function initGaugeFieldLime(L, path, cfgbase, configNum, gf, ec)
  if gf then
    fileName = string.format(path..cfgbase.."/cfgs_gf/"..cfgbase.."_gf.lime%d", configNum)
  elseif ec then
    fileName = string.format(path..cfgbase.."/cfgs/%d/"..cfgbase.."-%d_cfg_%d.lime", ec, ec, configNum)
  else
    fileName = string.format(path..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", configNum)
  end
  print(fileName .. "\n")
  reader, rinfo = qcd.qdpc.Reader(L, fileName)
  U, uInfo = reader:ColorMatrix(#L)
  return U
end

function compute_npr(L, U, ferm_prop, p_list, hypervolume, L_mom, clover, writer)
  local bvec = {0,0,0,0.5}

  for pidx = 1, #p_list do
    p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- what does spacetime_wall_source do? Source with definite momentum?
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S(x, y) (or might be sum_y e^(ipy) S(x, y))
    local anti_prop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()    -- this is S(p)

    -- Write momentum projected propagator to file (?)
    prop_path = string.format("prop/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgid)
    h5_force_write(writer, prop_path, mom4_prop)

    -- Covariant derivative (Dfor - Dback)_\mu. S can be a fermion field or a propagator.
    -- function D(S, mu)
    --   -- U[mu] is 1 indexed, so use mu + 1 if mu goes 0 to 3.
    --   Udagger = U[mu + 1]:shift(mu, "from_backward"):adjoin()
    --   return U[mu + 1] * S:shift(mu, "from_forward") + Udagger * S:shift(mu, "from_backward") - 2 * S
    -- end

    -- u = L:DiracFermion(3)
    -- Tu33 = (ubar * D(gamma{mu = 3} * u, 3) + ubar * gamma{mu = 3} * D(u, 3)) / 2    -- TODO might have to trace subtract
    -- Tu44 = (ubar * D(gamma{mu = 4} * u, 3) + ubar * gamma{mu = 4} * D(u, 4)) / 2
    -- Ou = (Tu33 - Tu44) / math.sqrt(2)
    -- Od = (Td33 - Td44) / math.sqrt(2)
    -- Dgamma33 = D(gamma{mu = 3} * S, 3) + gamma{mu = 3} * D(S, 3)
    -- Dgamma44 = D(gamma{mu = 4} * S, 4) + gamma{mu = 4} * D(S, 4)

    -- compute momentum projected Green's function G(p)
    norm = 1 / (2 * math.sqrt(2) * hypervolume)
    JS33 = U[4] * gamma{mu = 3} * S:shift(3, "from_forward") + U[4]:shift(3, "from_backward"):adjoin() *
            gamma{mu = 3} * S:shift(3, "from_backward") - 2 * gamma{mu = 3} * S
    -- TODO is the mu = 4 index time?
    JS44 = U[1] * gamma{mu = 0} * S:shift(0, "from_forward")  + U[1]:shift(0, "from_backward"):adjoin() *
            gamma{mu = 0} * S:shift(0, "from_backward") - 2 * gamma{mu = 0} * S
    JS = JS33 - JS44        -- JS = \sum_z' J(z, z') S(z')
    G = norm * ( gamma{mu = 5} * S:adjoin() * gamma{mu = 5} * JS ):sum()

    threept_path = string.format("threept/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgid)
    h5_force_write(writer, threept_path, G)

    -- prop should be S(z, p) = \sum_x S(z, x) e^{ipx}, where $S$ is the propagator.

    -- Here down is done in the Python script.
    -- invert prop to amputate vertex function legs
    -- Amputate legs to get vertex function \Gamma(p)
    -- Compute quark field renormalization
    -- Compute \Gamma_{Born}(p)
    -- Compute operator renormalization Z(p)
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    error("Must enter jobid, cfgpath, and cfgbase.\n")
end

if mq then
    kappa = 1 / (2 * mq + 8)
end

if Lx and Lt and beta and kappa then
    printf("Numerical parameters:\nLattice size: (%d, %d, %d, %d).\nBeta: %f.\nKappa: %f.\n", Lx, Lx, Lx, Lt, beta, kappa)
else
    error("Numerical parameters must be entered: Lx, Lt, beta, mq or kappa.\n")
end

-- Set parameters
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is

volume = 1    -- spatial volume
for i = 0, #L - 2 do
  volume = volume * L[i]
end
hypervolume = volume * L[3]

-- Paths to output file.
folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local csw = 1
local bcs = {1,1,1,-1}
local clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
local p_list_NPR = {{2,2,2,2},{2,2,2,4},{2,2,2,6},{3,3,3,2},{3,3,3,4},{3,3,3,6},{3,3,3,8},{4,4,4,4},{4,4,4,6},{4,4,4,8}}

status, U = pcall(initGaugeFieldLime, L, cfgpath, cfgbase, cfgnum, gf, ec)
if status then
  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  compute_npr(L, U, ferm_prop, p_list_NPR, hypervolume, L_mom, clover, writer)

  writer:close()
else
  printf("No gauge field configuration at %s.\n", cfgpath..cfgbase)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
end
