#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function get_wilson_source(U, prop, nu)
  local cur_plus1 = U[nu + 1]:shift(nu, "from_backward"):adjoin() * prop:shift(nu, "from_backward")
  local cur_plus2 = U[nu + 1]:shift(nu, "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward"))

  local cur_neg1 = U[nu + 1] * prop:shift(nu, "from_forward")
  local cur_neg2 = U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward"))

  return (cur_plus1 + cur_plus2 - cur_neg1 + cur_neg2) / 2
end

-- Performs the computation through the operator, which should be faster for more sink / src momenta.
function compute_npr_through_op(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, jobid)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}
  local origin = {0, 0, 0, 0}

  -- Compute point propagators at N random points on the lattice.
  local seed = cfgnum + jobid
  math.randomseed(seed)
  local y = {}
  for mu = 0, #L - 1 do
    y[mu + 1] = math.random(0, L[mu] - 1)    -- integer in range 0, L[d] - 1
  end
  local src = compute_point_source(U, y)
  local prop = compute_propagator(U, ferm_prop, src)
  printf("Point source computed. Point at: (%d, %d, %d, %d)", y[1], y[2], y[3], y[4])

  -- compute sequential propagators for currents
  local M = {}
  local M5 = {}
  for mu = 0, #L - 1 do
    printf("Computing sequential propagator for operator mu = %d.\n", mu)
    local b = gamma{mu = mu} * prop
    local b5 = gamma{mu = mu} * gamma{mu = 5} * prop
    print("Computing sequential propagator")
    M[mu] = compute_propagator(U, ferm_prop, b)
    M5[mu] = compute_propagator(U, ferm_prop, b5)
  end
  print("Sequential sources initialized.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    for mu = 0, #L - 1 do
      local matrix_element = (FT * M[mu]):sum()
      local matrix_element_5 = (FT * M5[mu]):sum()
      local op_path = string.format("O%d/p%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4])
      local op_path_5 = string.format("O5%d/p%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4])
      h5_force_write(writer, op_path, matrix_element)
      h5_force_write(writer, op_path_5, matrix_element_5)
      printf("Matrix element O%d written at: %s\n", mu + 1, op_path)
      printf("Matrix element O5%d written at: %s\n", mu + 1, op_path_5)
    end
  end
end

function compute_npr_through_sink(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, gauge)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local antiprop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    for mu = 0, #L - 1 do
      local matrix_element = (antiprop * (gamma{mu = mu} * prop)):sum()
      local matrix_element_5 = (antiprop * ((gamma{mu = mu} * gamma{mu = 5}) * prop)):sum()
      local op_path = string.format("GV%d/p%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4])
      local op_path_5 = string.format("GA%d/p%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4])
      h5_force_write(writer, op_path, matrix_element)
      h5_force_write(writer, op_path_5, matrix_element_5)
      printf("Matrix element GV%d written at: %s\n", mu + 1, op_path)
      printf("Matrix element GA%d written at: %s\n", mu + 1, op_path_5)
    end
  end
end

-- Computes through the operator with nonzero operator momentum. Takes p_list to be the list of
-- q values, with q = p_2 - p_1 being the momentum for current injection. In RI-sMOM, this is taken to
-- be the same as p_1.
function npr_smom(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, jobid, q)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}
  local origin = {0, 0, 0, 0}

  -- Compute point propagators at N random points on the lattice.
  local seed = cfgnum + jobid
  math.randomseed(seed)
  local y = {}
  for mu = 0, #L - 1 do
    y[mu + 1] = math.random(0, L[mu] - 1)    -- integer in range 0, L[d] - 1
  end
  local src = compute_point_source(U, y)
  local prop = compute_propagator(U, ferm_prop, src)
  print("Point source computed. Point at: (%d, %d, %d, %d)", y[1], y[2], y[3], y[4])

  local qFTarg = L:Real(0)
  for mu = 0, #L - 1 do
    qFTarg = qFTarg + L:Real(L:pcoord(mu)) * (q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
  end
  local qFT = qFTarg:expi()

  -- compute sequential propagators for currents
  local M = {}
  local M5 = {}
  for mu = 0, #L - 1 do
    printf("Computing sequential propagator for operator mu = %d.\n", mu)
    -- b(z) = e^iqz Gamma S(z)
    local b = qFT * (gamma{mu = mu} * prop)
    local b5 = qFT * (gamma{mu = mu} * gamma{mu = 5} * prop)
    M[mu] = compute_propagator(U, ferm_prop, b)
    M5[mu] = compute_propagator(U, ferm_prop, b5)
  end
  print("Sequential sources initialized.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      -- now p_1 = p_2 - q
      --FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      FTarg = FTarg - L:Real(y[mu + 1]) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]        -- e^{-i p_2 y}
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] - q[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]    -- e^{i p_1 x}
    end
    local FT = FTarg:expi()
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    for mu = 0, #L - 1 do
      local matrix_element = (FT * M[mu]):sum()
      local matrix_element_5 = (FT * M5[mu]):sum()
      local op_path = string.format("O%d/p%d%d%d%d/q%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4], q[1], q[2], q[3], q[4])
      local op_path_5 = string.format("O5%d/p%d%d%d%d/q%d%d%d%d", mu + 1, p[1], p[2], p[3], p[4], q[1], q[2], q[3], q[4])
      h5_force_write(writer, op_path, matrix_element)
      h5_force_write(writer, op_path_5, matrix_element_5)
      printf("Matrix element O%d written at: %s\n", mu + 1, op_path)
      printf("Matrix element O5%d written at: %s\n", mu + 1, op_path_5)
    end
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 16
Lt = 48

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file. Uncomment after 0 mode test
folder = string.format("/data/d10b/users/poare/npr_momfrac/output")
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
-- FOR THE ZERO MODE TEST AGAINST RI/SMOM
-- folder = string.format("/data/d10b/users/poare/0nubb/output")
-- out_folder = string.format("%s/%s_test0mode_%d", folder, cfgbase, jobid)
-- filename = string.format("%s/npr_momfrac_output/cfg%d.h5", out_folder, cfgnum)

printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493
--local csw = 1    -- uncomment after testing is done
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
--[[
local p_list_NPR = {}
for i = -6, 6 do
  for j = -6, 6 do
    for k = -6, 6 do
      for l = -6, 6 do
        p_list_NPR[#p_list_NPR + 1] = {i, j, k, l}
      end
    end
  end
end
]]
-- local p_list_NPR = {}
-- for k = -6, 6 do
--     p_list_NPR[#p_list_NPR + 1] = {k, k, 0, 0}
-- end
local p_list_NPR = {{0, 0, 0, 0}}

printf("Number of momenta to compute at: %d.", #p_list_NPR)


local gauge_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
print("Reading gauge file at: %s\n", gauge_file)

status, U, finfo, info = pcall(load_conf, L, gauge_file)
if status then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  print("Gauge file read. Computing NPR.")
  compute_npr_through_sink(L, U, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, jobid)

  writer:close()
else
  printf("No gauge field configuration at %s.\n", gauge_file)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
  print(U)
end

if gpu then
    qcd.quda.fini()
end
