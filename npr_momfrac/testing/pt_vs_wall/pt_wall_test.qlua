#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

-- Computes the operator O_{\nu\nu} for direction \nu. Note \nu = 0 is x, ..., \nu = 3 is t.
function O(U, prop, antiprop, nu)
  local D_prop = 0.5 * (U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) -
            U[nu + 1]:shift(nu, "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward")))
  local antiprop_D = 0.5 * ((antiprop:shift(nu, "from_forward") * gamma{mu = nu}) * U[nu + 1]:adjoin()
          - (antiprop:shift(nu, "from_backward") * gamma{mu = nu}) * U[nu + 1]:shift(nu, "from_backward"))
  return (antiprop * D_prop - antiprop_D * prop):sum()
end

-- Satisfies O(U, prop, antiprop, nu) = (antiprop * get_sequential_source(U, prop, nu)):sum()
-- Given a propagator S(x), returns \sum_z J_\nu(x, z) S(z)
function get_sequential_source(U, prop, nu)
  return U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) - U[nu + 1]:shift(nu,
          "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward"))
end

-- Performs the computation through the operator, which should be faster for more sink / src momenta.
function compute_npr_op(L, U, ferm_prop, p_list, hypervolume, group, clover, writer, Nc)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}
  local origin = {0, 0, 0, 0}

  -- Compute point propagators at all points on the lattice
  local S_list = {}
  local pts = {}
  print("Computing all point propagators.")
  local Lx = L[0]
  local Lt = L[#L - 1]
  local pt_list = {}
  local S_list = {}
  local idx = 1
  for x = 1, Lx - 1 do
    for y = 1, Lx - 1 do
      for z = 1, Lx - 1 do
        for t = 1, Lt - 1 do
          printf("Computing for point: (%d, %d, %d, %d).", x, y, z, t)
          local y = {x, y, z, t}
          pt_list[i] = y
          local src = compute_point_source(U, y)
          S_list[i] = compute_propagator(U, ferm_prop, src)
          idx = idx + 1
        end
      end
    end
  end
  print("Point sources computed.")

  print("Tying up propagators")
  for pidx = 1, #p_list do
    local mom4_prop
    local p = l_list[pidx]
    printf("Momentum is: (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local N = #pt_list
    for i = 1, N do
      local y = pt_list[i]
      local prop = S_list[i]
      local FTarg = L:Real(0)
      for mu = 0, #L - 1 do
        FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      end
      local FT = FTarg:expi()

      if i == 1 then
        mom4_prop = (FT * prop):sum()
      else
        mom4_prop = mom4_prop + (FT * prop):sum()
      end
    end
    mom4prop_avg = mom4prop / N
    local prop_path = string.format("prop_op/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4prop_avg)
    printf("Propagator written at path: %s\n", prop_path)
  end
end

function compute_npr_sink(L, U, ferm_prop, p_list, hypervolume, group, clover, writer, Nc)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local mom4_prop = (FT * prop):sum()

    local prop_path = string.format("prop_op/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

Lx = 2
Lt = 4

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
out_folder = string.format("/data/d10b/users/poare/npr_momfrac/output/pt_wall_test_%d", jobid)
filename = string.format("%s/job%d.h5", out_folder, jobid)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493
-- local csw = 1    -- uncomment after testing is done
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
-- local p_list_NPR = {{2,2,2,2},{2,2,2,4},{2,2,2,6},{3,3,3,2},{3,3,3,4},{3,3,3,6},{3,3,3,8},{4,4,4,4},{4,4,4,6},{4,4,4,8}}
local p_list_NPR = {{1, 1, 1, 1}, {1, 1, 1, 2}, {1, 1, 1, 4}, {2, 2, 2, 2}, {2, 2, 2, 4}, {3, 3, 3, 3}, {4, 4, 4, 4}, {5, 5, 5, 5}}

printf("Number of momenta to compute at: %d.", #p_list_NPR)

-- U = init_id_field(L)
U = {}
seed = os.time()
d = 4    -- Number of dimensions?
rands = make_seq_and_lat_rnds(seed, d)    -- {seq_rand, lat_rand}
lat_rand = rands[2]
init_weak_field(L, lat_rand, group, 3, U)
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  print("Computing NPR through the sink.")
  compute_npr_sink(L, U, ferm_prop, p_list_NPR, vol, group, clover, writer, Nc)

  print("Computing NPR through the operator.")
  compute_npr_op(L, U, ferm_prop, p_list_NPR, vol, group, clover, writer, Nc)

  writer:close()

if gpu then
    qcd.quda.fini()
end
