#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function initGaugeFieldLime(L, file)
  reader, rinfo = qcd.qdpc.Reader(L, file)
  U, uInfo = reader:ColorMatrix(#L)
  return U
end

function random_state_generator(L)
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  local S = L:RandomState(os.random(), r)
  return S
end

-- Projects random 3 by 3 matrix X onto SUn
function toSUn(L, X)
  Nc = 3
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1,0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function random_SUn_field(L)
  local S = random_state_generator(L)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

-- Performs gauge transformation \Omega on gauge field U. This is the transformation
--  U_\mu(n)\mapsto \Omega(n) U_\mu(n) \Omega(n + \hat{mu}) (eqn 3.6)
function gauge_transform(L, U, group)
  print("Gauge transforming original field.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = {}
    for mu = 0, #L - 1 do
      Uprime[mu + 1] = omega * U[mu + 1] * omega:shift(mu, "from_forward"):adjoin()
    end
  return Uprime
end

-- Computes the operator O_{\nu\nu} for direction \nu. Note \nu = 0 is x, ..., \nu = 3 is t.
function O(U, prop, antiprop, nu)
  local D_prop = 0.5 * (U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) -
            U[nu + 1]:shift(nu, "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward")))
  local antiprop_D = 0.5 * ((antiprop:shift(nu, "from_forward") * gamma{mu = nu}) * U[nu + 1]:adjoin()
          - (antiprop:shift(nu, "from_backward") * gamma{mu = nu}) * U[nu + 1]:shift(nu, "from_backward"))
  return (antiprop * D_prop - antiprop_D * prop):sum()
end

-- Satisfies O(U, prop, antiprop, nu) = (antiprop * get_sequential_source(U, prop, nu)):sum()
-- Given a propagator S(x), returns \sum_z J_\nu(x, z) S(z)
function get_sequential_source(U, prop, nu)
  return U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) - U[nu + 1]:shift(nu,
          "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward"))
end

-- Test propagator by performing a gauge transformation. Will store the result at
-- path propprime/pstring/cfgnum.
function run_gauge_transform_test(L, U, FT, ferm_prop, group, writer, p, Nc, cfgnum)
  print("Computing observables after gauge transformation.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = gauge_transform(L, U, omega)
  local srcprime = compute_spacetime_wall_source_antiperiodicBC(Uprime, p)
  local propprime = compute_propagator(Uprime, ferm_prop, srcprime)
  local mom4_prop_prime = (FT * propprime):sum()
  local prop_prime_path = string.format("propprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
  h5_force_write(writer, prop_prime_path, mom4_prop_prime)
end

-- Performs the computation through the operator, which should be faster for more sink / src momenta.
function compute_npr_through_op(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, gauge)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}
  local origin = {0, 0, 0, 0}

  local src = compute_point_source(U, origin)
  -- local src = compute_spacetime_wall_source_antiperiodicBC(U, {0, 0, 0, 0})
  print("Computing point source")
  local pt_prop = compute_propagator(U, ferm_prop, src)
  print("Point source computed")

  -- Determine propagators to compute. Use some point sources, some momentum sources, etc.
  -- Will need to replace the "prop" term in get_sequential_source with an iteration over
  -- all propagators in S_list
  -- add in any propagators I want in S_list, then also add momentum sources.
  local S_list = {pt_prop}
  -- Run with 3 different wall sources to see how it goes. TODO try point sources.
  --[[
  local S_list = {}
  local S_p_list = {{0, 0, 0, 0}, {1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}}
  for i = 1, #S_p_list do
    local p = S_p_list[i]
    printf("pidx is: %d", i)
    printf("Momentum source (%d, %d, %d, %d) computed", p[1], p[2], p[3], p[4])
    local src = compute_spacetime_wall_source_antiperiodicBC(U, S_p_list[i])
    local prop = compute_propagator(U, ferm_prop, src)
    S_list[#S_list + 1] = prop
  end
  ]]

  -- TODO test for O11, O22, etc. Later for just the operator, only need to compute for 33 - 44
  for i = 1, #S_list do
    printf("Computing for propagator %d.\n", i)
    local b = {}
    local M = {}
    local prop = S_list[i]
    for mu = 2, #L - 1 do
      printf("Computing sequential propagator for mu = %d.\n", mu)
      b[mu] = get_sequential_source(U, prop, mu)
      M[mu] = compute_propagator(U, ferm_prop, b[mu])
    end
    print("Sequential sources initialized.")

    for pidx = 1, #p_list do
      printf("p index: %d\n", pidx)
      local p = p_list[pidx]
      printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
      local FTarg = L:Real(0)
      local FTarg_neg = L:Real(0)
      for mu = 0, #L - 1 do
        FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      end
      local FT = FTarg:expi()

      local mom4_prop = (FT * prop):sum()

      -- Write momentum projected propagator to file
      local prop_path
      if gauge then
        prop_path = string.format("propprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
      else
        prop_path = string.format("prop/prop%d/p%d%d%d%d/cfg%d", i, p[1], p[2], p[3], p[4], cfgnum)
      end
      h5_force_write(writer, prop_path, mom4_prop)
      printf("Propagator written at path: %s\n", prop_path)

      -- compute momentum projected Green's function G(p)
      local norm = 1 / (2 * math.sqrt(2))    -- / hypervolume

      local JS = {}
      -- local JSneg = {}
      for mu = 2, #L - 1 do
        local matrix_element = (FT * M[mu]):sum()
        JS[mu] = matrix_element
        local op_path
        if gauge then
          op_path = string.format("O%d%dprime/p%d%d%d%d/cfg%d", mu + 1, mu + 1, p[1], p[2], p[3], p[4], cfgnum)
        else
          op_path = string.format("O_operator%d%d/prop%d/p%d%d%d%d/cfg%d", mu + 1, mu + 1, i, p[1], p[2], p[3], p[4], cfgnum)
        end
        h5_force_write(writer, op_path, matrix_element)
        printf("Matrix element O%d%d written at: %s\n", mu + 1, mu + 1, op_path)
      end
      local G = norm * (JS[2] - JS[3])

      local threept_path
      if gauge then
        threept_path = string.format("threeptprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
      else
        threept_path = string.format("threept/prop%d/p%d%d%d%d/cfg%d", i, p[1], p[2], p[3], p[4], cfgnum)
      end
      h5_force_write(writer, threept_path, G)
      printf("Three point function written at: %s\n", threept_path)
    end
  end
end

-- Set gauge=true to change the paths which we store the fields at.
function compute_npr(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, gauge)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- This uses a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local antiprop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    local prop_path
    if gauge then
      prop_path = string.format("propprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    else
      prop_path = string.format("prop/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    end
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    local norm = 1 / (2 * math.sqrt(2))    -- / hypervolume
    local JS = {}
    for mu = 0, #L - 1 do
      local matrix_element = O(U, prop, antiprop, mu)
      -- make sure O(U, prop, antiprop, nu) = (antiprop * get_sequential_source(U, prop, nu)):sum() (this works)
      --local matrix_element_sequential = (antiprop * get_sequential_source(U, prop, mu)):sum()
      -- TODO this should give me the same matrix element with sequential source
      local src_seq = get_sequential_source(U, prop, mu)
      local M = compute_propagator(U, ferm_prop, src_seq)
      local matrix_element_sequential = (FT * M):sum()    -- TODO if this doesn't match, then try normal FT
      JS[mu] = matrix_element
      local op_path
      local op_path_sequential
      if gauge then
        op_path = string.format("O%d%dprime/p%d%d%d%d/cfg%d", mu + 1, mu + 1, p[1], p[2], p[3], p[4], cfgnum)
      else
        op_path = string.format("O%d%d/p%d%d%d%d/cfg%d", mu + 1, mu + 1, p[1], p[2], p[3], p[4], cfgnum)
        op_path_sequential = string.format("O_sequential%d%d/p%d%d%d%d/cfg%d", mu + 1, mu + 1, p[1], p[2], p[3], p[4], cfgnum)
      end
      -- TODO If these two are the exact same, then the sequential source should be accurate.
      h5_force_write(writer, op_path, matrix_element)
      h5_force_write(writer, op_path_sequential, matrix_element_sequential)
      printf("Matrix element O%d%d written at: %s\n", mu + 1, mu + 1, op_path)
    end
    -- local JS = JS33 - JS44        -- JS = \sum_z' J(z, z') S(z'), S is the propagator
    local G = norm * (JS[2] - JS[3])

    local threept_path
    if gauge then
      threept_path = string.format("threeptprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    else
      threept_path = string.format("threept_sink/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    end
    h5_force_write(writer, threept_path, G)
    printf("Three point function through sink written at: %s\n", threept_path)
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Uncomment to run test locally
-- jobid = 0
-- cfgpath = "/Users/poare/lqcd/npr_momfrac/testing/"
-- cfgbase = "cl3_16_48_b6p1_m0p2450"
-- cfgnum = 200
-- printf("Running test configuration.")

-- Set parameters
Lx = 16
Lt = 48
beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is
-- compare at cfg 200
-- compare at point source and momentum smeared source, momentum [2 2 2 2]

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493
-- local csw = 1    -- uncomment after testing is done
local bcs = {1,1,1,-1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
-- local p_list_NPR = {{2,2,2,2},{2,2,2,4},{2,2,2,6},{3,3,3,2},{3,3,3,4},{3,3,3,6},{3,3,3,8},{4,4,4,4},{4,4,4,6},{4,4,4,8}}
local p_list_NPR = {{1, 1, 1, 1}, {2, 2, 2, 2}, {3, 3, 3, 3}, {4, 4, 4, 4}, {5, 5, 5, 5}}
--[[
local p_list_NPR = {}
local nhat = {.5, .5, .5, .5}
local r = 2
for i = 1, 5 do
  for j = 1, 5 do
    for k = 1, 5 do
      for l = 1, 5 do
        local x = {i, j, k, l}
        local proj = {}
        local xdotn = i * nhat[1] + j * nhat[2] + k * nhat[3] + l * nhat[4]
        local sum = 0
        for mu = 0, #L - 1 do
          proj[mu + 1] = xdotn * nhat[mu + 1]
          sum = sum + (x[mu + 1] - proj[mu + 1]) * (x[mu + 1] - proj[mu + 1])
        end
        if sum <= r * r then
          p_list_NPR[#p_list_NPR + 1] = x
        end
      end
    end
  end
end
]]

printf("Number of momenta to compute at: %d.", #p_list_NPR)

local gauge_file
if gf then
    gauge_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
else
    gauge_file = string.format(cfgpath..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", cfgnum)
end
print("Reading gauge file at: %s\n", gauge_file)

status, U, finfo, info = pcall(load_conf, L, gauge_file)
if status then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  print("Gauge file read. Computing NPR.")
  compute_npr(L, U, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, false)

  compute_npr_through_op(L, U, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, false)

  -- Gauge transform to test if this can be correct
  -- Uprime = gauge_transform(L, U, group)
  -- compute_npr(L, Uprime, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, true)

  writer:close()
else
  printf("No gauge field configuration at %s.\n", gauge_file)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
  print(U)
end

if gpu then
    qcd.quda.fini()
end
