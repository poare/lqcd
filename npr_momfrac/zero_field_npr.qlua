#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

function init_id_field(L)
  local U = {}
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu+1] = (A*complex(0,1)):exp()
  end
  return U
end

-- Computes the operator O_{\nu\nu} for direction \nu. Note \nu = 0 is x, ..., \nu = 3 is t.
function O(U, prop, antiprop, nu)
  local D_prop = 0.5 * (U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) -
            U[nu + 1]:shift(nu, "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward")))
  local antiprop_D = 0.5 * ((antiprop:shift(nu, "from_forward") * gamma{mu = nu}) * U[nu + 1]:adjoin()
          - (antiprop:shift(nu, "from_backward") * gamma{mu = nu}) * U[nu + 1]:shift(nu, "from_backward"))
  return (antiprop * D_prop - antiprop_D * prop):sum()
end

-- Satisfies O(U, prop, antiprop, nu) = (antiprop * get_sequential_source(U, prop, nu)):sum()
-- Given a propagator S(x), returns \sum_z J_\nu(x, z) S(z)
function get_sequential_source(U, prop, nu)
  return U[nu + 1] * (gamma{mu = nu} * prop:shift(nu, "from_forward")) - U[nu + 1]:shift(nu,
          "from_backward"):adjoin() * (gamma{mu = nu} * prop:shift(nu, "from_backward"))
end

-- Test propagator by performing a gauge transformation. Will store the result at
-- path propprime/pstring/cfgnum.
function run_gauge_transform_test(L, U, FT, ferm_prop, group, writer, p, Nc, cfgnum)
  print("Computing observables after gauge transformation.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = gauge_transform(L, U, omega)
  local srcprime = compute_spacetime_wall_source_antiperiodicBC(Uprime, p)
  local propprime = compute_propagator(Uprime, ferm_prop, srcprime)
  local mom4_prop_prime = (FT * propprime):sum()
  local prop_prime_path = string.format("propprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
  h5_force_write(writer, prop_prime_path, mom4_prop_prime)
end

-- Set gauge=true to change the paths which we store the fields at.
function compute_npr(L, U, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, gauge)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local antiprop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    local prop_path
    if gauge then
      prop_path = string.format("propprime/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    else
      prop_path = string.format("prop/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    end
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    local norm = 1 / (2*math.sqrt(2))
    local JS = {}
    for mu = 2, #L - 1 do
      local matrix_element = O(U, prop, antiprop, mu)
      -- Verify that O(U, prop, antiprop, nu) = (antiprop * get_sequential_source(U, prop, nu)):sum() (it does)
      --local matrix_element_sequential = (antiprop * get_sequential_source(U, prop, mu)):sum()

      -- This code should compute the same matrix element with a sequential momentum source.
      JS[mu] = matrix_element
      local op_path = string.format("O%d%d/p%d%d%d%d/cfg%d", mu + 1, mu + 1, p[1], p[2], p[3], p[4], cfgnum)
      h5_force_write(writer, op_path, matrix_element)
      printf("Matrix element O%d%d written at: %s\n", mu + 1, mu + 1, op_path)
    end
    local G = norm * (JS[2] - JS[3])

    local threept_path = string.format("threept/p%d%d%d%d/cfg%d", p[1], p[2], p[3], p[4], cfgnum)
    h5_force_write(writer, threept_path, G)
    printf("Three point function through sink written at: %s\n", threept_path)
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Uncomment to run test locally
-- jobid = 0
-- cfgpath = "/Users/poare/lqcd/npr_momfrac/testing/"
-- cfgbase = "cl3_16_48_b6p1_m0p2450"
-- cfgnum = 200
-- printf("Running test configuration.")

-- Set parameters
Lx = 16
Lt = 48
beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)
Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is
-- compare at cfg 200
-- compare at point source and momentum smeared source, momentum [2 2 2 2]

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493
-- local csw = 1    -- uncomment after testing is done
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

local p_list_NPR = {}
local nhat = {.5, .5, .5, .5}
local r = 2
for i = 1, 5 do
  for j = 1, 5 do
    for k = 1, 5 do
      for l = 1, 5 do
        local x = {i, j, k, l}
        local proj = {}
        local xdotn = i * nhat[1] + j * nhat[2] + k * nhat[3] + l * nhat[4]
        local sum = 0
        for mu = 0, #L - 1 do
          proj[mu + 1] = xdotn * nhat[mu + 1]
          sum = sum + (x[mu + 1] - proj[mu + 1]) * (x[mu + 1] - proj[mu + 1])
        end
        if sum <= r * r then
          p_list_NPR[#p_list_NPR + 1] = x
        end
      end
    end
  end
end
--]]

printf("Number of momenta to compute at: %d.", #p_list_NPR)

print("Intializing identity gauge field.\n")

U = init_id_field(L)
-- project gauge configuration onto SU(3)
for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

-- Open file writer
local hdf5params = { method = "phdf5" }
local writer = qcd.hdf5.Writer(filename, hdf5params)

print("Gauge file read. Computing NPR.")
compute_npr(L, U, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, false)

writer:close()

if gpu then
    qcd.quda.fini()
end
