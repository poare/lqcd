#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
require "lib/toAdjoint3"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function compute_Zq_sink(L, U, ferm_prop, p_list, hypervolume, group, clover, writer, Nc)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local mom4_prop = (FT * prop):sum()
    mom4_prop = (1 / hypervolume) * mom4_prop

    local prop_path = string.format("prop_sink/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)
  end
end

function random_state_generator(L)
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  local S = L:RandomState(os.random(), r)
  return S
end

-- Projects random 3 by 3 matrix X onto SUn
function toSUn(L, X)
  Nc = 3
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1,0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function random_SUn_field(L)
  local S = random_state_generator(L)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

-- Performs gauge transformation \Omega on gauge field U. This is the transformation
--  U_\mu(n)\mapsto \Omega(n) U_\mu(n) \Omega(n + \hat{mu}) (eqn 3.6)
function gauge_transform(L, U, group)
  print("Gauge transforming original field.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = {}
    for mu = 0, #L - 1 do
      Uprime[mu + 1] = omega * U[mu + 1] * omega:shift(mu, "from_forward"):adjoin()
    end
  return Uprime
end

--[[
  Pij = trace(U_\mu\nu), U_\mu\nu = U_\mu(n) U_\nu(n + \mu) U_\mu(n + \nu)^\dagger U_\nu(n)^\dagger
  Always index at i + 1 or j + 1 because i, j are from 0 to #L - 1
]]
function plaq(U, i, j)
  local Ui = U[j + 1]:shift(i, "from_forward")
  local Uj = U[i + 1]:shift(j, "from_forward")
  local Pij = (U[i + 1] * Ui * Uj:adjoin() * U[j + 1]:adjoin()):trace():real()
  return Pij:sum()
end

function getFmunu(U)
  local F = {}
  for mu = 0, #L - 1 do
    F[mu] = {}
    for nu = 0, #L - 1 do
      if mu < nu then
        local Qmunu = plaq(U, mu, nu) + plaq(U, nu, -mu) + plaq(U, -mu, -nu) + plaq(U, -nu, mu)
        local Qnumu = plaq(U, nu, mu) + plaq(U, mu, -nu) + plaq(U, -nu, -mu) + plaq(U, -mu, nu)
        F[mu][nu] = (complex(0, -1) / 8) * (Qmunu - Qnumu)
      elseif i == j then
        F[mu][nu] = 0
      else
        F[mu][nu] = - F[nu][mu]
      end
    end
  end
  return F
end

function getFmunuComponents(U, Nc)
  local F = getFmunu(U)
  local tSU3 = (1/2) * fundMatrices(L, Nc)
  local Fcomps = {}
  for mu = 0, #L - 1 do
    Fcomps[mu] = {}
    for nu = 0, #L - 1 do
      Fcomps[mu][nu] = {}
      for a = 1, Nc * Nc - 1 do
        Fcomps[mu][nu][a] = 2 * (Fcomps[mu][nu] * tSU3[a]):trace()
      end
    end
  end
  return Fcomps
end

--[[
  Computes the propagator S(p) and the three point function through approximating S(p) with
  point sources.
]]
function compute_mixing_ptsource(L, U, Uflowed, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum, jobid)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}
  local origin = {0, 0, 0, 0}

  -- Computes a random point propagator.
  local seed = cfgnum + jobid
  math.randomseed(seed)
  local y = {}
  for mu = 0, #L - 1 do
    y[mu + 1] = math.random(0, L[mu] - 1)    -- integer in range 0, L[d] - 1
  end
  local src = compute_point_source(U, y)
  local prop = compute_propagator(U, ferm_prop, src)
  printf("Point source computed at (%d, %d, %d, %d).", y[1], y[2], y[3], y[4])

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Write momentum projected propagator to file
    local mom4_prop = (FT * prop):sum()
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- Construct operator and get three point functions
    local F = getFmunuComponents(Uflowed, Nc)
    for mu = 0, #L - 1 do
      for nu = 0, #L - 1 do
        local Omunu = 0
        for alpha = 0, #L - 1 do
          for a = 1, Nc * Nc - 1 do
            Omunu = Omunu + (F[mu][alpha][a] * F[nu][alpha][a]):sum()
          end
        end
        local Gmunu = Omunu * mom4_prop
        local op_path = string.format("O%d%d/p%d%d%d%d", mu + 1, nu + 1, p[1], p[2], p[3], p[4])
        h5_force_write(writer, op_path, Gmunu)
        printf("Matrix element O%d%d written at: %s\n", mu + 1, mu + 1, op_path)
      end
    end

  end
end

--[[
 Computes the three point function G_\mu(p) and the two point propagator S(p) by
 directly inverting a momentum source of e^{-ipx}.
]]
function compute_mixing_momsource(L, U, Uflowed, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, cfgnum)
  local bvec = {0, 0, 0, 0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local antiprop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- compute momentum projected Green's function G(p)
    -- Construct operator and get three point functions
    local F = getFmunuComponents(Uflowed, Nc)
    for mu = 0, #L - 1 do
      for nu = 0, #L - 1 do
        local Omunu = 0
        for alpha = 0, #L - 1 do
          for a = 1, Nc * Nc - 1 do
            Omunu = Omunu + (F[mu][alpha][a] * F[nu][alpha][a]):sum()
          end
        end
        local Gmunu = Omunu * mom4_prop
        local op_path = string.format("O%d%d/p%d%d%d%d", mu + 1, nu + 1, p[1], p[2], p[3], p[4])
        h5_force_write(writer, op_path, Gmunu)
        printf("Matrix element O%d%d written at: %s\n", mu + 1, mu + 1, op_path)
      end
    end
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 16
Lt = 48

beta = 6.1
mq = -0.2450
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/poare"    -- specify what the file path to lqcd is

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
--folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
folder = string.format("/data/d10b/users/poare/gq_mixing/meas")
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.2493
--local csw = 1    -- uncomment after testing is done
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
local p_list_NPR = {}
local a = 3
for i = -a, a do
 for j = -a, a do
   for k = -a, a do
     for l = -a, a do
        p_list_NPR[#p_list_NPR + 1] = {i, j, k, l}
      end
    end
  end
end

printf("Number of momenta to compute at: %d.", #p_list_NPR)

local gauge_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
local flowed_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
print("Reading gauge file at: %s\n", gauge_file)

status1, U, finfo1, info1 = pcall(load_conf, L, gauge_file)
status2, Uflowed, finfo2, info2 = pcall(load_conf, L, flowed_file)
if status1 and status2 then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do
    U[mu + 1] = group.toGroup(U[mu + 1])
    Uflowed[mu + 1] = group.toGroup(Uflowed[mu + 1])
  end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  print("Gauge file read. Computing NPR.")
  compute_mixing_ptsource(L, U, Uflowed, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, cfgnum, jobid)

  writer:close()
else
  printf("No gauge field configuration at %s or %s.\n", gauge_file, flowed_file)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
  print(U)
  print(Uflowed)
end

if gpu then
    qcd.quda.fini()
end
