#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
require "lib/toAdjoint3"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function init_id_field(L)
  local U = {}
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu + 1] = (A * complex(0, 1)):exp()
  end
  return U
end

function compute_Zq_sink(L, U, ferm_prop, p_list, hypervolume, group, clover, writer, Nc)
  local bvec = {0,0,0,0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local mom4_prop = (FT * prop):sum()
    mom4_prop = (1 / hypervolume) * mom4_prop

    local prop_path = string.format("prop_sink/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)
  end
end

function random_state_generator(L)
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  local S = L:RandomState(os.random(), r)
  return S
end

-- Projects random 3 by 3 matrix X onto SUn
function toSUn(L, X)
  Nc = 3
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1,0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function random_SUn_field(L)
  local S = random_state_generator(L)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

-- Performs gauge transformation \Omega on gauge field U. This is the transformation
--  U_\mu(n)\mapsto \Omega(n) U_\mu(n) \Omega(n + \hat{mu}) (eqn 3.6)
function gauge_transform(L, U, group)
  print("Gauge transforming original field.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = {}
    for mu = 0, #L - 1 do
      Uprime[mu + 1] = omega * U[mu + 1] * omega:shift(mu, "from_forward"):adjoin()
    end
  return Uprime
end

--[[
  Pij = trace(U_\mu\nu), U_\mu\nu = U_\mu(n) U_\nu(n + \mu) U_\mu(n + \nu)^\dagger U_\nu(n)^\dagger.
  If i or j is negative, then use U_{-\mu} =U__\mu(n - \mu)^\dagger. NOTE THIS IS 1-INDEXED, SO
  i = 1 is x, i = 2 is y, i = 3 is z, and i = 4 is t. This is to allow for negative values of the
  direction. This works with U[i], since it is 1-indexed, but shift is 0-indexed, so subtract 1
]]
function plaq(U, i, j)
  local Pij
  if i > 0 and j > 0 then
    local U1 = U[j]:shift(i - 1, "from_forward")    -- shift is 0-indexed
    local U2 = U[i]:shift(j - 1, "from_forward")
    Pij = U[i] * U1 * U2:adjoin() * U[j]:adjoin()
  elseif i < 0 and j > 0 then
    local ii = -i
    local U1 = U[ii]:shift(ii - 1, "from_backward")
    local U2 = U[j]:shift(ii - 1, "from_backward")
    local U3 = U[ii]:shift(ii - 1, "from_backward"):shift(j - 1, "from_forward")
    Pij = U1:adjoin() *  U2 * U3 * U[j]:adjoin()
  elseif i > 0 and j < 0 then
    local jj = -j
    local U1 = U[jj]:shift(i - 1, "from_forward"):shift(jj - 1, "from_backward")
    local U2 = U[i]:shift(jj - 1, "from_backward")
    local U3 = U[jj]:shift(jj - 1, "from_backward")
    Pij = U[i] * U1:adjoin() * U2:adjoin() * U3
  else  -- then i and j are both negative
    local ii = -i
    local jj = -j
    local U1 = U[ii]:shift(ii - 1, "from_backward")
    local U2 = U[jj]:shift(ii - 1, "from_backward"):shift(jj - 1, "from_backward")
    local U3 = U[ii]:shift(ii - 1, "from_backward"):shift(jj - 1, "from_backward")
    local U4 = U[jj]:shift(jj - 1, "from_backward")
    Pij = U1:adjoin() * U2:adjoin() * U3 * U4
  end
  return Pij
end

function getFmunu(L, U, Nc)
  local F = {}
  for mu = 1, #L do
    F[mu] = {}
    for nu = 1, #L do
      if mu < nu then
        local Qmunu = plaq(U, mu, nu) + plaq(U, nu, -mu) + plaq(U, -mu, -nu) + plaq(U, -nu, mu)
        local Qnumu = plaq(U, nu, mu) + plaq(U, mu, -nu) + plaq(U, -nu, -mu) + plaq(U, -mu, nu)
        F[mu][nu] = (complex(0, -1) / 8) * (Qmunu - Qnumu)    -- mu, nu = 1, 2, 3, 4. Let's 1 index F_munu
      elseif mu == nu then
        --local tmp = qcd.ColorMatrixN(Nc)
        --F[mu][nu] = L:ColorMatrix(tmp)
        F[mu][nu] = L:ColorMatrix(complex(0, 0))
      else
        F[mu][nu] = - F[nu][mu]
      end
    end
  end
  return F
end

function getFmunuComponents(L, U, Nc)
  local F = getFmunu(L, U, Nc)
  local lambdaSU3 = fundMatrices(L, Nc)    -- Gell-mann matrices, t^a = (1/2) * lambda^a
  local Fcomps = {}
  for mu = 1, #L do
    Fcomps[mu] = {}
    for nu = 1, #L do
      Fcomps[mu][nu] = {}
      for a = 1, Nc * Nc - 1 do
        Fcomps[mu][nu][a] = (F[mu][nu] * lambdaSU3[a]):trace()    -- F_{mu nu}^a = 2 * tr{F_{mu nu} t^a} = tr{F_{mu nu} lambda^a}
      end
    end
  end
  return Fcomps
end

--[[
  Computes the propagator S(p) and the three point function through approximating S(p) with
  point sources.
]]
function compute_mixing_ptsource(L, U, Uflowed, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc, nsrc, cfgnum, jobid)
  print("Computing through the operator.")
  local bvec = {0, 0, 0, 0.5}

  -- Computes N point propagators
  local N = nsrc    -- number of points to compute propagators at
  -- local seed = cfgnum + jobid
  local seed = 10     -- for testing
  -- local seed = os.time()
  math.randomseed(seed)
  local S_list = {}
  local pts = {}
  printf("Computing %d random point sources.", N)

  for i = 1, N do
    local y = {}
    for mu = 0, #L - 1 do
      y[mu + 1] = math.random(0, L[mu] - 1)
    end
    pts[i] = y
    local src = compute_point_source(U, y)
    printf("Computing for propagator %d at point (%d, %d, %d, %d).\n", i, y[1], y[2], y[3], y[4])
    S_list[i] = compute_propagator(U, ferm_prop, src)
  end
  print("Propagator computed.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])

    -- compute momentum projected propagator
    -- local mom4_prop = L:DiracPropagatorN(Nc)
    local mom4_prop = qcd.DiracPropagatorN(Nc)
    for i = 1, #S_list do
      local prop = S_list[i]
      local y = pts[i]
      local FTarg = L:Real(0)
      for mu = 0, #L - 1 do
        FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      end
      local FT = FTarg:expi()    -- e^{ip(x - y_i)}
      mom4_prop = mom4_prop + (FT * prop):sum()
    end

    -- Write momentum projected propagator to file
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- Compute momentum projected Green's function G_qg for a glue EMT insertion on a quark line.
    print("Computing glue EMT insertion on quark line.")
    local F = getFmunuComponents(L, Uflowed, Nc)
    for mu = 1, #L do
      for nu = 1, #L do
        local glueEMT = 0
        for alpha = 1, #L do
          for a = 1, Nc * Nc - 1 do
            glueEMT = glueEMT + (F[mu][alpha][a] * F[nu][alpha][a]):sum()
          end
        end
        local Gqg_munu = glueEMT * mom4_prop
        local Gqg_path = string.format("Gqg%d%d/p%d%d%d%d", mu, nu, p[1], p[2], p[3], p[4])
        h5_force_write(writer, Gqg_path, Gqg_munu)
        printf("Matrix element Gqg%d%d written at: %s\n", mu, nu, Gqg_path)
      end
    end

  end

  print("Constructing sequential sources for Gqq and projecting to H(4) irreps.")
  local b = {}
  for i = 1, #S_list do
    b[i] = {}
    local prop = S_list[i]
    local y = pts[i]
    for mu1 = 0, #L - 1 do
      b[i][mu1 + 1] = {}
      for nu1 = 0, #L - 1 do
        b[i][mu1 + 1][nu1 + 1] = (gamma{mu = mu1} * (U[nu1 + 1] * prop:shift(nu1, "from_forward"))
                - gamma{mu = mu1} * (U[nu1 + 1]:shift(nu1, "from_backward"):adjoin() * prop:shift(nu1, "from_backward")))
      end
    end
  end

  local b3dim = {}
  local b6dim = {}
  for i = 1, #S_list do
    b3dim[i] = {
      (b[i][3][3] - b[i][4][4]) / math.sqrt(2),
      (b[i][1][1] - b[i][2][2]) / math.sqrt(2),
      (b[i][1][1] + b[i][2][2] - b[i][3][3] - b[i][4][4]) / 2.0
    }
    b6dim[i] = {
      (b[i][1][2] + b[i][2][1]) / math.sqrt(2),
      (b[i][1][3] + b[i][3][1]) / math.sqrt(2),
      (b[i][1][4] + b[i][4][1]) / math.sqrt(2),
      (b[i][2][3] + b[i][3][2]) / math.sqrt(2),
      (b[i][2][4] + b[i][4][2]) / math.sqrt(2),
      (b[i][3][4] + b[i][4][3]) / math.sqrt(2),
    }
  end

  local M3 = {}     -- inversions for tau_1^(3)
  local M6 = {}     -- inversions for tau_3^(6)
  for i = 1, #S_list do
    M3[i] = {}
    M6[i] = {}
    print("Constructing sequential propagators for 3-dim H(4) irrep.")
    for k = 1, 3 do
      M3[i][k] = compute_propagator(U, ferm_prop, b3dim[i][k])
    end
    print("Constructing sequential propagators for 6-dim H(4) irrep.")
    for l = 1, 6 do
      M6[i][l] = compute_propagator(U, ferm_prop, b6dim[i][l])
    end
  end

  print("Constructing Gqq for 3-dim irrep.")
  for k = 1, 3 do
    for pidx = 1, #p_list do
      local p = p_list[pidx]
      local Gqq3 = qcd.DiracPropagatorN(Nc)
      for i = 1, #S_list do
        local y = pts[i]
        local FTarg = L:Real(0)
        for mu = 0, #L - 1 do
          FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
        end
        local FT = FTarg:expi()   -- e^{ip(x - y_i)}
        Gqq3 = Gqq3 + (FT * M3[i][k]) : sum()
      end
      local Gqq3_path = string.format("Gqq/3%d/p%d%d%d%d", k, p[1], p[2], p[3], p[4])
      h5_force_write(writer, Gqq3_path, Gqq3)
      printf("Component %d of 3-dim irrep for Gqq written at: %s\n", k, Gqq3_path)
    end
  end

  print("Constructing Gqq for 6-dim irrep.")
  for k = 1, 6 do
    for pidx = 1, #p_list do
      local p = p_list[pidx]
      local Gqq6 = qcd.DiracPropagatorN(Nc)
      for i = 1, #S_list do
        local y = pts[i]
        local FTarg = L:Real(0)
        for mu = 0, #L - 1 do
          FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
        end
        local FT = FTarg:expi()
        Gqq6 = Gqq6 + (FT * M6[i][k]) : sum()
      end
      local Gqq6_path = string.format("Gqq/6%d/p%d%d%d%d", k, p[1], p[2], p[3], p[4])
      h5_force_write(writer, Gqq6_path, Gqq6)
      printf("Component %d of 6-dim irrep for Gqq written at: %s\n", k, Gqq6_path)
    end
  end

end

--[[
 Computes the three point function G_\mu(p) and the two point propagator S(p) by
 directly inverting a momentum source of e^{-ipx}.
]]
function compute_mixing_momsource(L, U, Uflowed, ferm_prop, p_list, hypervolume, L_mom, group, clover, writer, Nc)
  local bvec = {0, 0, 0, 0.5}
  print("Computing through sink.")

  for pidx = 1, #p_list do
    printf("p index: %d\n", pidx)
    local p = p_list[pidx]
    printf("Momentum is (%d, %d, %d, %d).", p[1], p[2], p[3], p[4])
    local FTarg = L:Real(0)
    for mu = 0, #L - 1 do
      FTarg = FTarg + L:Real(L:pcoord(mu)) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
    end
    local FT = FTarg:expi()

    -- Compute a source of e^{-ipx}
    local src = compute_spacetime_wall_source_antiperiodicBC(U, p)
    local prop = compute_propagator(U, ferm_prop, src)    -- S_p(x)
    local antiprop = gamma{mu = 5} * prop:adjoin() * gamma{mu = 5}
    local mom4_prop = (FT * prop):sum()

    -- Write momentum projected propagator to file (?)
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- Compute momentum projected Green's function G_qq for a quark EMT insertion
    -- on a quark line
    for alpha = 0, #L - 1 do
      for beta = 0, #L - 1 do
        local Gqq_comp1 = (((antiprop * gamma{mu = alpha}) * U[beta + 1]) * prop:shift(beta, "from_forward")):sum()
        local Gqq_comp2 = (((antiprop:shift(beta, "from_forward") * gamma{mu = alpha}) * U[beta + 1]) * prop):sum()
        local Gqq = (Gqq_comp1 - Gqq_comp2) / hypervolume
        local Gqq_path = string.format("Gqq%d%d/p%d%d%d%d", alpha + 1, beta + 1, p[1], p[2], p[3], p[4])
        h5_force_write(writer, Gqq_path, Gqq)
        printf("Matrix element Gqq%d%d (quark EMT insertion on quark line) written at: %s\n", alpha + 1, beta + 1, Gqq_path)
      end
    end

    -- Compute momentum projected Green's function G_qg for a glue EMT insertion
    -- on a quark line.
    local F = getFmunuComponents(L, Uflowed, Nc)
    for mu = 1, #L do
      for nu = 1, #L do
        local glueEMT = 0
        for alpha = 1, #L do
          for a = 1, Nc * Nc - 1 do
            glueEMT = glueEMT + (F[mu][alpha][a] * F[nu][alpha][a]):sum()
          end
        end
        local Gqg_munu = glueEMT * mom4_prop
        local Gqg_path = string.format("Gqg%d%d/p%d%d%d%d", mu, nu, p[1], p[2], p[3], p[4])
        h5_force_write(writer, Gqg_path, Gqg_munu)
        printf("Matrix element Gqg%d%d (glue EMT insertion on quark line) written at: %s\n", mu, nu, Gqg_path)
      end
    end
  end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
-- Lx = 48
-- Lt = 96
-- Lx = 12
-- Lt = 24
Lx = 16
Lt = 16
-- Lx = 18
-- Lt = 18
beta = 6.3
mq = -0.2416

-- Lx = 12
-- Lt = 24
-- beta = 6.1
-- mq = -0.2800

printf("Light quark mass: %d, beta: %d", mq, beta)
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
L_mom = qcd.lattice{Lt}
lqcd_dir = "/home/lqcd/poare"    -- specify what the file path to lqcd is

vol = 1        -- hypervolume
for i = 0, #L - 1 do
  vol = vol * L[i]
end

-- Paths to output file.
--folder = string.format("%s/lqcd/npr_momfrac/output", lqcd_dir)
folder = string.format("/work/lqcd/d10b/users/poare/gq_mixing/meas")
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.20536588031793
local bcs = {1, 1, 1, -1}

local clover
if gpu then
    qcd.quda.init(L)
    clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
else
    clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
end

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

-- momenta to compute Z(p) at
-- local p_list_NPR = {{2, 2, 2, 2}, {4, 4, 4, 4}, {6, 6, 6, 6}, {8, 8, 8, 8}, {3, 0, 0, 0}, {6, 0, 0, 0}, {9, 0, 0, 0}}

local p_list_NPR = {}
-- local a = 1
-- local b = 6
local a = 1
local b = 6
for i = a, b do
 for j = a, b do
   for k = a, b do
     for l = a, b do
        p_list_NPR[#p_list_NPR + 1] = {i, j, k, l}
      end
    end
  end
end

-- local p_list_NPR = {{1, 1, 1, 1}, {3, 0, 0, 0}}    -- free field test

printf("Number of momenta to compute at: %d.", #p_list_NPR)

-- local gauge_file = string.format(cfgpath..cfgbase.."/smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
-- local flowed_file = string.format(cfgpath..cfgbase.."/smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
local gauge_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)
local flowed_file = string.format(cfgpath..cfgbase.."_smeared_gf/landau/"..cfgbase.."_cfg_%d.lime", cfgnum)

print("Reading gauge file at: %s\n", gauge_file)

status1, U, finfo1, info1 = pcall(load_conf, L, gauge_file)
status2, Uflowed, finfo2, info2 = pcall(load_conf, L, flowed_file)

-- print("Running free field test")
-- status1 = true
-- status2 = true
-- U = init_id_field(L)
-- Uflowed = init_id_field(L)

if status1 and status2 then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do
    U[mu + 1] = group.toGroup(U[mu + 1])
    Uflowed[mu + 1] = group.toGroup(Uflowed[mu + 1])
  end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  nsrc = 1
  printf("Gauge file read. Computing NPR with %d point sources.", nsrc)
  compute_mixing_ptsource(L, U, Uflowed, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc, nsrc, cfgnum, jobid)
  -- compute_mixing_momsource(L, U, Uflowed, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc)
  -- compute_npr_momsource(L, U, ferm_prop, p_list_NPR, vol, L_mom, group, clover, writer, Nc)

  print("Finished.")
  writer:close()
else
  printf("No gauge field configuration at %s or %s.\n", gauge_file, flowed_file)
  logs_dir = string.format("%s/lqcd/npr_momfrac/logs/%s_%d", lqcd_dir, cfgbase, jobid)
  os.execute(string.format("mv %s/cfg%d.txt %s/no_output", logs_dir, cfgnum, logs_dir))
  print(U)
  print(Uflowed)
end

if gpu then
    qcd.quda.fini()
end
