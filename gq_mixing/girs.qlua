#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
require "lib/toAdjoint3"
if gpu then
  require "lib/quda"
end

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
        for si = 0, qcd.Ns - 1 do
            printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
            for sj = 0, qcd.Ns - 1 do
              local zv = m[{c=ci,d=si}]
              local z = zv[{c=cj,d=sj}]
              printf("  [%1.12e %1.12e]", z:real(), z:imag())
            end
            printf("\n")
          end
        end
      end
      printf("\n")
    end

function init_id_field(L)
  local U = {}
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu + 1] = (A * complex(0, 1)):exp()
  end
  return U
end

function random_state_generator(L)
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  local S = L:RandomState(os.random(), r)
  return S
end

-- Projects random 3 by 3 matrix X onto SUn
function toSUn(L, X)
  Nc = 3
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1,0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function random_SUn_field(L)
  local S = random_state_generator(L)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

-- Performs gauge transformation \Omega on gauge field U. This is the transformation
--  U_\mu(n)\mapsto \Omega(n) U_\mu(n) \Omega(n + \hat{mu}) (eqn 3.6)
function gauge_transform(L, U, group)
  print("Gauge transforming original field.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = {}
    for mu = 0, #L - 1 do
      Uprime[mu + 1] = omega * U[mu + 1] * omega:shift(mu, "from_forward"):adjoin()
    end
  return Uprime
end

-- Constructs the sequential source b_{i, j}(z, t) given a propagator prop.
function construct_b(i, j, U, prop)
    return (
        gamma{mu=i} * (U[j+1] * prop:shift(j, "from_forward") - U[j+1]:shift(j, "from_backward"):adjoin() * prop:shift(j, "from_backward"))
        + gamma{mu=j} * (U[i+1] * prop:shift(i, "from_forward") - U[i+1]:shift(j, "from_backward"):adjoin() * prop:shift(i, "from_backward"))
    ):trace():spintrace() / 2
end

function sink_contract(i, j, t, U, M) 
    -- Construct position vectors
    local origin = {0, 0, 0, 0}

    local jhat_t = {0, 0, 0, t}
    local mjhat_0 = {0, 0, 0, 0}
    local mjhat_t = {0, 0, 0, t}
    jhat_t[j] = 1
    mjhat_0[j] = -1
    mjhat_t[j] = -1

    local ihat_t = {0, 0, 0, t}
    local mihat_0 = {0, 0, 0, 0}
    local mihat_t = {0, 0, 0, t}
    ihat_t[i] = 1
    mihat_0[i] = -1
    mihat_t[i] = -1

    return (gamma{mu=i} * (U[j+1][origin] * M[jhat_t] - U[j+1][mjhat_0]:adjoin() * M[mjhat_t])
            + gamma{mu=j} * (U[i+1][origin] * M[ihat_t] - U[i+1][mihat_0]:adjoin() * M[mihat_t])) / 2
end

--[[
  Computes the two-point correlator necessary for GIRS renormalization.
]]
function compute_girs_ptsource(L, U, ferm_prop, t_list, hypervolume, group, clover, writer, Nc, nsrc, cfgnum, jobid)

    sp_idxs = {{1, 2}, {1, 3}, {2, 3}}

    print("Computing point source at (0, 0, 0, 0).")
    local y = {0, 0, 0, 0}
    local src = compute_point_source(U, y)
    print("Computing propagator.")
    local S_pt = compute_propagator(U, ferm_prop, src)
    print("Propagator computed.")

    for tidx = 1, #t_list do
        printf("t index: %d\n", tidx)
        local t = t_list[tidx]
        printf("Time is %d.", t)

        for idx = 1, #sp_idxs do
            local i = sp_idxs[idx][1]
            local j = sp_idxs[idx][2]
            printf("Computing for (i, j) = (%d, %d).", i, j)
            local b = construct_b(i, j, U, S_pt)
            local M_ij = compute_propagator(U, ferm_prop, b)
            local Gconn = sink_contract(i, j, t, U, M_ij)

        end


    -- compute momentum projected propagator
    -- local mom4_prop = L:DiracPropagatorN(Nc)
    local mom4_prop = qcd.DiracPropagatorN(Nc)
    for i = 1, #S_list do
      local prop = S_list[i]
      local y = pts[i]
      local FTarg = L:Real(0)
      for mu = 0, #L - 1 do
        FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
      end
      local FT = FTarg:expi()    -- e^{ip(x - y_i)}
      mom4_prop = mom4_prop + (FT * prop):sum()
    end

    -- Write momentum projected propagator to file
    local prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
    h5_force_write(writer, prop_path, mom4_prop)
    printf("Propagator written at path: %s\n", prop_path)

    -- Compute momentum projected Green's function G_qg for a glue EMT insertion on a quark line.
    print("Computing glue EMT insertion on quark line.")
    local F = getFmunuComponents(L, Uflowed, Nc)
    for mu = 1, #L do
      for nu = 1, #L do
        local glueEMT = 0
        for alpha = 1, #L do
          for a = 1, Nc * Nc - 1 do
            glueEMT = glueEMT + (F[mu][alpha][a] * F[nu][alpha][a]):sum()
          end
        end
        local Gqg_munu = glueEMT * mom4_prop
        local Gqg_path = string.format("Gqg%d%d/p%d%d%d%d", mu, nu, p[1], p[2], p[3], p[4])
        h5_force_write(writer, Gqg_path, Gqg_munu)
        printf("Matrix element Gqg%d%d written at: %s\n", mu, nu, Gqg_path)
      end
    end

  end

  print("Constructing sequential sources for Gqq and projecting to H(4) irreps.")
  local b = {}
  for i = 1, #S_list do
    b[i] = {}
    local prop = S_list[i]
    local y = pts[i]
    for mu1 = 0, #L - 1 do
      b[i][mu1 + 1] = {}
      for nu1 = 0, #L - 1 do
        b[i][mu1 + 1][nu1 + 1] = (gamma{mu = mu1} * (U[nu1 + 1] * prop:shift(nu1, "from_forward"))
                - gamma{mu = mu1} * (U[nu1 + 1]:shift(nu1, "from_backward"):adjoin() * prop:shift(nu1, "from_backward")))
      end
    end
  end

  local b3dim = {}
  local b6dim = {}
  for i = 1, #S_list do
    b3dim[i] = {
      (b[i][3][3] - b[i][4][4]) / math.sqrt(2),
      (b[i][1][1] - b[i][2][2]) / math.sqrt(2),
      (b[i][1][1] + b[i][2][2] - b[i][3][3] - b[i][4][4]) / 2.0
    }
    b6dim[i] = {
      (b[i][1][2] + b[i][2][1]) / math.sqrt(2),
      (b[i][1][3] + b[i][3][1]) / math.sqrt(2),
      (b[i][1][4] + b[i][4][1]) / math.sqrt(2),
      (b[i][2][3] + b[i][3][2]) / math.sqrt(2),
      (b[i][2][4] + b[i][4][2]) / math.sqrt(2),
      (b[i][3][4] + b[i][4][3]) / math.sqrt(2),
    }
  end

  local M3 = {}     -- inversions for tau_1^(3)
  local M6 = {}     -- inversions for tau_3^(6)
  for i = 1, #S_list do
    M3[i] = {}
    M6[i] = {}
    print("Constructing sequential propagators for 3-dim H(4) irrep.")
    for k = 1, 3 do
      M3[i][k] = compute_propagator(U, ferm_prop, b3dim[i][k])
    end
    print("Constructing sequential propagators for 6-dim H(4) irrep.")
    for l = 1, 6 do
      M6[i][l] = compute_propagator(U, ferm_prop, b6dim[i][l])
    end
  end

  print("Constructing Gqq for 3-dim irrep.")
  for k = 1, 3 do
    for pidx = 1, #p_list do
      local p = p_list[pidx]
      local Gqq3 = qcd.DiracPropagatorN(Nc)
      for i = 1, #S_list do
        local y = pts[i]
        local FTarg = L:Real(0)
        for mu = 0, #L - 1 do
          FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
        end
        local FT = FTarg:expi()   -- e^{ip(x - y_i)}
        Gqq3 = Gqq3 + (FT * M3[i][k]) : sum()
      end
      local Gqq3_path = string.format("Gqq/3%d/p%d%d%d%d", k, p[1], p[2], p[3], p[4])
      h5_force_write(writer, Gqq3_path, Gqq3)
      printf("Component %d of 3-dim irrep for Gqq written at: %s\n", k, Gqq3_path)
    end
  end

  print("Constructing Gqq for 6-dim irrep.")
  for k = 1, 6 do
    for pidx = 1, #p_list do
      local p = p_list[pidx]
      local Gqq6 = qcd.DiracPropagatorN(Nc)
      for i = 1, #S_list do
        local y = pts[i]
        local FTarg = L:Real(0)
        for mu = 0, #L - 1 do
          FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
        end
        local FT = FTarg:expi()
        Gqq6 = Gqq6 + (FT * M6[i][k]) : sum()
      end
      local Gqq6_path = string.format("Gqq/6%d/p%d%d%d%d", k, p[1], p[2], p[3], p[4])
      h5_force_write(writer, Gqq6_path, Gqq6)
      printf("Component %d of 6-dim irrep for Gqq written at: %s\n", k, Gqq6_path)
    end
  end

end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
Lx = 48
Lt = 96
-- Lx = 12
-- Lt = 24
beta = 6.3
mq = -0.2416

-- Lx = 12
-- Lt = 24
-- beta = 6.1
-- mq = -0.2800

printf("Light quark mass: %d, beta: %d", mq, beta)
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
lqcd_dir = "/home/lqcd/poare"    -- specify what the file path to lqcd is

vol = 1        -- spatial volume
for i = 0, #L - 2 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = string.format("/work/lqcd/d20b/users/poare/gq_mixing/girs")
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.20536588031793
local bcs = {1, 1, 1, -1}

local clover
qcd.quda.init(L)
clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

local t_list_NPR = {2}
printf("Number of times to compute at: %d.", #t_list_NPR)

local gauge_file = string.format(cfgpath..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", cfgnum)

print("Reading gauge file at: %s\n", gauge_file)

status, U, finfo1, info1 = pcall(load_conf, L, gauge_file)

-- print("Running free field test")
-- status = true
-- U = init_id_field(L)

if status then
  -- project gauge configuration onto SU(3)
  for mu = 0, #L-1 do
    U[mu + 1] = group.toGroup(U[mu + 1])
  end

  -- Open file writer
  local hdf5params = { method = "phdf5" }
  local writer = qcd.hdf5.Writer(filename, hdf5params)

  nsrc = 1
  printf("Gauge file read. Computing NPR with %d point sources.", nsrc)
  compute_girs_ptsource(L, U, ferm_prop, t_list_NPR, vol, group, clover, writer, Nc, nsrc, cfgnum, jobid)

  print("Finished.")
  writer:close()
else
  printf("No gauge field configuration at %s.\n", gauge_file)
end

qcd.quda.fini()
