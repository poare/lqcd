#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
require "lib/toAdjoint3"
-- require "lib/quda"

-------------------------------------------------------------------
------------------------ UTILITY FUNCTIONS ------------------------
-------------------------------------------------------------------

-- Prints a qcd.DiracPropagator object
function show_propagator(name, m)
    local nc = m:colors()
    for ci = 0, nc - 1 do
        for cj = 0, nc - 1 do
            for si = 0, qcd.Ns - 1 do
                printf("%s[%d,%d,%d,.] ", name, ci,cj,si)
                for sj = 0, qcd.Ns - 1 do
                    local zv = m[{c=ci,d=si}]
                    local z = zv[{c=cj,d=sj}]
                    printf("  [%1.12e %1.12e]", z:real(), z:imag())
                end
                printf("\n")
            end
        end
    end
    printf("\n")
end

function init_id_field(L)
  local U = {}
  for mu = 0, #L - 1 do
    local A = L:ColorMatrixN(Nc, 0.0)
    U[mu + 1] = (A * complex(0, 1)):exp()
  end
  return U
end

function random_state_generator(L)
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  local S = L:RandomState(os.random(), r)
  return S
end

-- Projects random 3 by 3 matrix X onto SUn
function toSUn(L, X)
  Nc = 3
  local Y = (X - X:adjoin()) / 2
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1, 0))):exp()
end

function weak_SUn(L, S)
  return toSUn(L, 0.2 * S:gaussian_ColorMatrix())
end

function random_SUn_field(L)
  local S = random_state_generator(L)
  local v = weak_SUn(L, S)
  for i = 1, 100 do
    v = v * weak_SUn(L, S)
  end
  return v:proj(1e-6, 150)
end

-- Performs gauge transformation \Omega on gauge field U. This is the transformation
--  U_\mu(n)\mapsto \Omega(n) U_\mu(n) \Omega(n + \hat{mu}) (eqn 3.6)
function gauge_transform(L, U, group)
  print("Gauge transforming original field.")
  local S = random_state_generator(L)
  local omega = group.toGroup((complex(0, 1) * group.randomAlgebra(S, Nc)):exp())
  local Uprime = {}
    for mu = 0, #L - 1 do
      Uprime[mu + 1] = omega * U[mu + 1] * omega:shift(mu, "from_forward"):adjoin()
    end
  return Uprime
end

-- Constructs the sequential source b_{i, j}(z, t) given a propagator prop.
function construct_b(i, j, U, prop)
    return (
        gamma{mu=i} * (U[j+1] * prop:shift(j, "from_forward") - U[j+1]:shift(j, "from_backward"):adjoin() * prop:shift(j, "from_backward"))
        + gamma{mu=j} * (U[i+1] * prop:shift(i, "from_forward") - U[i+1]:shift(j, "from_backward"):adjoin() * prop:shift(i, "from_backward"))
    ):trace():spintrace() / 2
end

-- Returns an identity matrix in color and spin space (identity propagator at a single spacetime point)
function id_prop(Nc)
    local prop = qcd.DiracPropagatorN(Nc)
    local dv = qcd.DiracFermionN(Nc)
    for s = 0, Ns - 1 do
        for c = 0, Nc - 1 do
            dv[{c=c, d=s}] = complex(1, 0)
            prop[{c=c, d=s}] = dv
        end
    end
    return prop
end

-- Constructs the kernel J_{ij}(\vec{0}, \vec{\xi}; 0) as a matrix in spin-color space (DiracPropagator)
function construct_Jsrc(L, U, i, j, Nc, Ns)
    local Jsrc = L:DiracPropagatorN(Nc)
    local origin = {0, 0, 0, 0}

    -- Initialize non-latticized propagator objects
    local jhat = {0, 0, 0, 0}
    jhat[j] = 1
    local p0 = gamma{mu=i} * (U[j+1][origin]:adjoin() * id_prop(Nc))
    -- local p0 = qcd.DiracPropagatorN(Nc)
    -- p0 = gamma{mu=i} * (U[j+1][origin]:adjoin() * id_prop(Nc))

    local mjhat = {0, 0, 0, 0}
    -- mjhat[j] = -1
    mjhat[j] = L[j]-1
    local p1 = gamma{mu=i} * (U[j+1][mjhat] * id_prop(Nc))
    -- local p1 = qcd.DiracPropagatorN(Nc)
    -- p1 = gamma{mu=i} * (U[j+1][mjhat] * id_prop(Nc))

    local ihat = {0, 0, 0, 0}
    ihat[i] = 1
    local p2 = gamma{mu=j} * (U[i+1][origin]:adjoin() * id_prop(Nc))
    -- local p2 = qcd.DiracPropagatorN(Nc)
    -- p2 = gamma{mu=j} * (U[i+1][origin]:adjoin() * id_prop(Nc))

    local mihat = {0, 0, 0, 0}
    -- mihat[i] = -1
    mihat[i] = L[i]-1
    local p3 = gamma{mu=j} * (U[i+1][mihat] * id_prop(Nc))
    -- local p3 = qcd.DiracPropagatorN(Nc)
    -- p3 = gamma{mu=j} * (U[i+1][mihat] * id_prop(Nc))

    -- Populate propagator at correct locations. 
    -- TODO make sure this is storing the correct propagator and not its transpose (i.e. may want to switch 
    -- the role of a <--> b and alpha <--> beta).
    for alpha = 0, Ns - 1 do
        for beta = 0, Ns - 1 do
            for a = 0, Nc - 1 do
                for b = 0, Nc - 1 do

                    local jhat_coord = table_copy(jhat)
                    jhat_coord.c = b
                    jhat_coord.d = beta
                    Jsrc[{c=a, d=alpha}][jhat_coord] = p0[{c=a, d=alpha}][{c=b, d=beta}]

                    local mjhat_coord = table_copy(mjhat)
                    mjhat_coord.c = b
                    mjhat_coord.d = beta
                    Jsrc[{c=a, d=alpha}][mjhat_coord] = p1[{c=a, d=alpha}][{c=b, d=beta}]

                    local ihat_coord = table_copy(ihat)
                    ihat_coord.c = b
                    ihat_coord.d = beta
                    Jsrc[{c=a, d=alpha}][ihat_coord] = p2[{c=a, d=alpha}][{c=b, d=beta}]

                    local mihat_coord = table_copy(mihat)
                    mihat_coord.c = b
                    mihat_coord.d = beta
                    Jsrc[{c=a, d=alpha}][mihat_coord] = p3[{c=a, d=alpha}][{c=b, d=beta}]
                    
                end
            end
        end
    end
    return Jsrc
end

function sink_contract(i, j, t, U, M) 
    -- Construct position vectors
    local origin = {0, 0, 0, 0}

    local jhat_t = {0, 0, 0, t}
    local mjhat_0 = {0, 0, 0, 0}
    local mjhat_t = {0, 0, 0, t}
    jhat_t[j] = 1
    mjhat_0[j] = -1
    mjhat_t[j] = -1

    local ihat_t = {0, 0, 0, t}
    local mihat_0 = {0, 0, 0, 0}
    local mihat_t = {0, 0, 0, t}
    ihat_t[i] = 1
    mihat_0[i] = -1
    mihat_t[i] = -1

    return (gamma{mu=i} * (U[j+1][origin] * M[jhat_t] - U[j+1][mjhat_0]:adjoin() * M[mjhat_t])
            + gamma{mu=j} * (U[i+1][origin] * M[ihat_t] - U[i+1][mihat_0]:adjoin() * M[mihat_t])):spintrace():trace() / 2
end

--[[
  Computes the two-point correlator necessary for GIRS renormalization.
]]
function compute_girs_ptsource(L, U, ferm_prop, t_list, vol, group, clover, writer, Nc, nsrc, cfgnum, jobid)

    local sp_idxs = {{1, 2}, {1, 3}, {2, 3}}

    print("Computing point source at (0, 0, 0, 0).")
    local y = {0, 0, 0, 0}
    local src = compute_point_source(U, y)
    print("Computing propagator.")
    local S_pt = compute_propagator(U, ferm_prop, src)
    print("Propagator computed.")

    for tidx = 1, #t_list do
        printf("t index: %d\n", tidx)
        local t = t_list[tidx]
        printf("Time is %d.", t)

        for idx = 1, #sp_idxs do
            local i = sp_idxs[idx][1]
            local j = sp_idxs[idx][2]
            printf("Computing for (i, j) = (%d, %d).", i, j)
            local b = construct_b(i, j, U, S_pt)
            local M_ij = compute_propagator(U, ferm_prop, b)
            local Gconn = sink_contract(i, j, t, U, M_ij)
            local Gpath = string.format("G%d%d/t%d", i, j, t)
            h5_force_write(writer, Gpath, Gconn)
            printf("Matrix element Gqg%d%d written at: %s\n", i, j, Gpath)
        end
    end

end

function compute_girs_one_end(L, U, ferm_prop, vol, group, clover, writer, Nc, Ns, cfgnum, jobid)
    
    -- local L_mom = qcd.lattice{L[#L-1]}
    local sp_idxs = {{1, 2}, {1, 3}, {2, 3}}

    print("Computing point source at (0, 0, 0, 0).")
    local y = {0, 0, 0, 0}
    local src = compute_point_source(U, y)
    print("Computing propagator.")
    local S_pt = compute_propagator(U, ferm_prop, src)
    print("Propagator computed.")
    local antiprop_pt = gamma{mu=5} * (S_pt:adjoin() * gamma{mu=5})

    
    for idx = 1, #sp_idxs do
        local i = sp_idxs[idx][1]
        local j = sp_idxs[idx][2]
        printf("Inverting source Jij for (i, j) = (%d, %d).", i, j)
        local Jij = construct_Jsrc(L, U, i, j, Nc, Ns)
        local Mij = compute_propagator(U, ferm_prop, Jij)
        local dfor_Mij = U[j+1] * Mij:shift(j, "from_forward") - U[j+1]:shift(j, "from_backward"):adjoin() * Mij:shift(j, "from_backward")
        local dback_Mij = U[i+1] * Mij:shift(i, "from_forward") - U[i+1]:shift(i, "from_backward"):adjoin() * Mij:shift(i, "from_backward")
        local Gconn = ((vol/2) * antiprop_pt * (gamma{mu=i} * dfor_Mij + gamma{mu=j} * dback_Mij)):sum(L:MultiSet(L[3], L:pcoord(3)))
        -- local Gconn = (
        --     (vol/2) * antiprop_pt * (
        --         gamma{mu=i} * (U[j+1] * Mij:shift(j, "from_forward") - U[j+1]:shift(j, "from_backward"):adjoin() * Mij:shift(j, "from_backward")) 
        --         + gamma{mu=j} * (U[i+1] * Mij:shift(i, "from_forward") - U[i+1]:shift(i, "from_backward"):adjoin() * Mij:shift(i, "from_backward"))
        --     )
        -- ):sum(L:MultiSet(L[3], L:pcoord(3)))    -- Only sum over space

        print(Gconn)
        print(Gconn[0])
        print(Gconn[1])
        print(Gconn[11])

        -- print("trying trace")
        -- Gconn = Gconn:trace()
        -- print(Gconn[1])


        -- Write data as a lattice
        -- local Gconn_lat = L_mom:Complex(0)
        -- local Gconn_lat = L_mom:DiracPropagatorN(Nc)
        for t = 0, L[3] - 1 do
            -- Gconn_lat[{t}] = Gconn[t]:spintrace():trace()
            -- print(Gconn_lat)
            print("Trying to save Gconn")
            local Gconn_tr = Gconn[t+1]:spintrace():trace()
            print(Gconn_tr)

            local Gpath = string.format("G%d%d/t%d", i, j, t)
            h5_force_write(writer, Gpath, Gconn_tr)
            printf("Matrix element Gqg%d%d written at: %s\n", i, j, Gpath)
        end
        
        -- print(Gconn_lat)

        -- local Gpath = string.format("G%d%d", i, j)
        -- h5_force_write(writer, Gpath, Gconn)
        -- printf("Matrix element Gqg%d%d written at: %s\n", i, j, Gconn_lat)
    end
end

------------------------------------------------------------------
-------------------------- BEGIN SCRIPT --------------------------
------------------------------------------------------------------

-- Read in input from bash script.
if jobid and cfgpath and cfgbase then
    printf("Job ID: %d.\nEvaluating configurations at: %s%s.\n", jobid, cfgpath, cfgbase)
else
    print("No jobid, cfgpath, cfgbase entered.")
end

-- Set parameters
-- Lx = 48
-- Lt = 96
-- beta = 6.3
-- mq = -0.2416

Lx = 16
Lt = 48
beta = 6.1
mq = -0.2450

printf("Light quark mass: %d, beta: %d", mq, beta)
local kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
Ns = 4
L = qcd.lattice{Lx, Lx, Lx, Lt}
lqcd_dir = "/home/lqcd/poare"    -- specify what the file path to lqcd is

vol = 1        -- spatial volume
for i = 0, #L - 2 do
  vol = vol * L[i]
end

-- Paths to output file.
folder = string.format("/work/lqcd/d20b/users/poare/gq_mixing/girs")
out_folder = string.format("%s/%s_%d", folder, cfgbase, jobid)
filename = string.format("%s/cfg%d.h5", out_folder, cfgnum)
printf("OUTPUT FILE WILL WRITE TO: %s\n", filename)

local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1.20536588031793
local bcs = {1, 1, 1, -1}

-- Uncomment to run QUDA
-- local clover
-- qcd.quda.init(L)
-- clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
local clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)

local ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)

local t_list_NPR = {2}
printf("Number of times to compute at: %d.", #t_list_NPR)

-- local gauge_file = string.format(cfgpath..cfgbase.."/cfgs/"..cfgbase.."_cfg_%d.lime", cfgnum)
local gauge_file = string.format(cfgpath.."cfgs/"..cfgbase.."_cfg_%d.lime", cfgnum)  -- FOR TESTING

print("Reading gauge file at: %s\n", gauge_file)

-- status, U, finfo1, info1 = pcall(load_conf, L, gauge_file)

print("Running free field test")
status = true
U = init_id_field(L)

if status then
    -- project gauge configuration onto SU(3)
    for mu = 0, #L-1 do
    U[mu + 1] = group.toGroup(U[mu + 1])
    end

    -- Open file writer
    local hdf5params = { method = "phdf5" }
    local writer = qcd.hdf5.Writer(filename, hdf5params)

    printf("Gauge file read. Computing NPR with point source at origin.")
    --   compute_girs_ptsource(L, U, ferm_prop, t_list_NPR, vol, group, clover, writer, Nc, nsrc, cfgnum, jobid)
    compute_girs_one_end(L, U, ferm_prop, vol, group, clover, writer, Nc, Ns, cfgnum, jobid)

    print("Finished.")
    writer:close()
else
    printf("No gauge field configuration at %s.\n", gauge_file)
end

-- qcd.quda.fini()
