#!/usr/bin/env qlua

require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"

require "lib/quda"

--[[
function random_generator(lat, sseed, pshift)
   local x = lat:Int(0)
   local i
   local ss = sseed or os.random()
   for i = 0, #lat - 1 do
      local xshift, xscale
      if pshift then
         xshift = pshift[i+1]
      else
         xshift = os.random()
      end
      x = x * lat[i] + xshift + lat:pcoord(i)
   end
   return lat:RandomState(ss, x)
end

function random_seeds_serial(rng, n)
   local r = vector.int(n)
   for i = 0, n - 1 do
      r[i] = math.floor(rng:random_Real() * 1e9)
   end
   return r
end

function make_seq_and_lat_rnds(seed, nd)
   local seqRnd = qcd.RandomState(seed, 0)
   -- convert to table to not break interface
   local pshift = random_seeds_serial(seqRnd, nd)
   local pshiftTable = {}
   for i = 0, nd-1 do
      pshiftTable[i+1] = pshift[i]
   end
   local latRnd = {random_seeds_serial(seqRnd, 1)[0], pshiftTable}

   -- return {seqRnd, latRnd}
   return latRnd
end

function init_weak_field(L, latRnd, group, Nc, U)
   for mu = 0, #L - 1 do
      local A = group.randomAlgebra(random_generator(L, latRnd[1], latRnd[2]), Nc)
      U[mu+1] = group.exp(A*complex(0,1))
   end
end
]]

-- Set parameters
Lx = 16
Lt = 48

mq = -0.2450
kappa = 1 / (2 * mq + 8)

Nc = 3    -- qcd.Nc
L = qcd.lattice{Lx, Lx, Lx, Lt}
local group = group.get(Nc)    -- group = SU3 in su-n.qlua

local csw = 1
local bcs = {1, 1, 1, -1}

-- init quda. This line is usually where it breaks.
print("Initializing QUDA.")
qcd.quda.init(L)
print("QUDA initialized.")

clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
ferm_prop = propagator.make_from_ferm(clover, 1e-20, 1000)
p = {1, 1, 1, 1}

U = {}
--[[
seed = os.time()
-- seed = 5
d = 4    -- Number of dimensions?
-- rands = make_seq_and_lat_rnds(seed, d)    -- {seq_rand, lat_rand}
-- lat_rand = rands[2]
lat_rand = make_seq_and_lat_rnds(seed, d)
init_weak_field(L, lat_rand, group, 3, U)
]]
gauge_file = "/data/d10b/ensembles/isoClover/cl3_16_48_b6p1_m0p2450_smeared_gf/landau/cl3_16_48_b6p1_m0p2450_cfg_240.lime"
U = load_conf(L, gauge_file)
for mu = 0, #L-1 do U[mu+1] = group.toGroup(U[mu+1]) end

filename = string.format("/data/d10b/users/poare/misc/gpu_test/job%s.h5", jobid)
printf("OUTPUT FILE WILL WRITE TO: %s.\n", filename)
hdf5params = { method = "phdf5" }
writer = qcd.hdf5.Writer(filename, hdf5params)

print("Inverting propagator.")
src = compute_spacetime_wall_source_antiperiodicBC(U, p)
prop = compute_propagator(U, ferm_prop, src)

FTarg = L:Real(0)
for mu = 0, #L - 1 do
  FTarg = FTarg + (L:Real(L:pcoord(mu)) - L:Real(y[mu + 1])) * (p[mu + 1] + bvec[mu + 1]) * 2 * math.pi / L[mu]
end
FT = FTarg:expi()

mom4_prop = (FT * prop) : sum()
prop_path = string.format("prop/p%d%d%d%d", p[1], p[2], p[3], p[4])
h5_force_write(writer, prop_path, mom4_prop)
printf("Propagator written at path: %s\n", prop_path)

writer:close()

qcd.quda.fini()

print("Finished.")
