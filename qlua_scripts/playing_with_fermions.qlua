require "stdlib"
require "lib/fermion"
require "lib/clover_ferm"
require "lib/group"
require "lib/musing"
require "lib/propagator"
require "lib/su-n"
require "lib/quda"
require "lib/dw_ferm"    -- TODO need for DWF support

-- Utility functions
Nc = 3

function show_color_mat(U)
  local Nc = U:colors()
  for a = 0, Nc-1 do
    for b = 0, Nc-1 do
      local elt = U[{a=a,b=b}]
      printf("%.6f %+.6f\t", elt:real(), elt:imag())
    end
    printf("\n")
  end
end

function show_propagator(m)
  local nc = m:colors()
  for ci = 0, nc - 1 do
    for cj = 0, nc - 1 do
      for si = 0, qcd.Ns - 1 do
        printf("U[%d,%d,%d,.] ", ci,cj,si)
        for sj = 0, qcd.Ns - 1 do
          local zv = m[{c=ci,d=si}]
          local z = zv[{c=cj,d=sj}]
          printf("  [%1.12e %1.12e]", z[{0, 0, 0, 0}]:real(), z[{0, 0, 0, 0}]:imag())
        end
        printf("\n")
      end
    end
  end
  printf("\n")
end

function toSUn(L, X)    -- Project a matrix onto SU(N)
  local Y = (X - X:adjoin()) / 2    -- anti-hermitian part
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1, 0))):exp()
end

function weak_SUn(L, S)    -- Generate a SU(N) matrix close to 1
  return toSUn(L, .1 * S:gaussian_ColorMatrix())
end

-- Initialize lattice, random weak field configuration, and point source
Lx = 16
Lt = 48
L = qcd.lattice{Lx, Lx, Lx, Lt}

do
  local r = L:Int(os.random())
  for i = 0, #L - 1 do
    r = r * L[i] + L:pcoord(i)
  end
  S = L:RandomState(os.random(), r)
end

U = {}
for mu = 0, #L - 1 do    -- #L = 2 for a 3 dim lattice
  U[mu + 1] = weak_SUn(L, S)
end
show_color_mat(U[1][{0, 0, 0, 0}])
print("Weak field initialized.")

-- src = L:DiracPropagator()
-- Nc = src:colors()
-- for ic = 0, Nc - 1 do -- loop over color indices
--   for is = 0, qcd.Ns - 1 do  -- loop over spinor indices
--     local dv = L:DiracFermion()
--     dv[{0, 0, 0, 0, c = ic, d = is}] = complex(ic, is)
--     src[{c = ic, d = is}] = dv
--   end
-- end
-- print("Point source at origin created.")
q = {1, 1, 0, 0}
src = compute_spacetime_wall_source_antiperiodicBC(U, q)
print("Wall source created at momentum (1, 1, 1, 1)")

-- gpu = false

-- Parameters
mq = -0.2450
kappa = 1 / (2 * mq + 8)
csw = 1.2493
bcs = {1, 1, 1, -1}
LS = 8
--Ls = 8
M = 1.8
ml = 0.1

eps = 1e-20

-- gpu = false    -- use for tests on computer
if gpu then
  -- Initialize QUDA (must be done on a GPU)
  print("Testing QUDA.")
  qcd.quda.init(L)

  -- Clover fermions
  --[[
  print("Clover fermions with QUDA.")
  quda_clover = clover_ferm.quda_4d_nc3(kappa, csw, bcs)
  quda_cl_solver = propagator.make_from_ferm(quda_clover, 1e-20, 1000)
  S_quda_clover = compute_propagator(U, quda_cl_solver, src)
  show_propagator(S_quda_clover)
  -- quda_cl_solver:close()    -- try to close propagator
  --]]

--[[
  print("Testing with solver directly")
  quda_solver = qcd.quda.solver(
    U,
    {t_boundary = "ANTI_PERIODIC_T"},
    {clover_coeff = csw*kappa,
     dslash_type = "CLOVER_WILSON_DSLASH",
     kappa = kappa,
     tol = 1e-20,
     maxiter = 1000,
     inv_type = "CG_INVERTER",       -- Use these args for point inversion
     solve_type = "NORMOP_SOLVE"     -- Use these args for point inversion
    })
  S_temp = quda_solver:solve(src)
  print("Propagator solved")
  show_propagator(S_temp)
--]]

  -- DWF inverter
  print("DWFs with QUDA.")
  --[[
  quda_dwf_solver = qcd.quda.solver(U,
                             {t_boundary = "ANTI_PERIODIC_T"},
                             {inv_type = "CG_INVERTER",   -- some of these parameters need to be played with. Which ones are valid???
                              solve_type = "NORMEQ_PC_SOLVE",
                              dslash_type = "DOMAIN_WALL_DSLASH",
                              m5 = M,       -- m5 is the problem for some reason-- maybe it has to be positive?
                              solution_type = "MATPC_SOLUTION",
                              Ls = LS,
                              matpc_type = "MATPC_ODD_ODD",
                              tol = eps,
                              maxiter = 5000,
                              mass = ml
                             })
  ]]
  quda_dwf_solver = dw_ferm:create_dwf_multigrid_solver(U, M, LS)
  print("Solver initialized. Attempting solve.")
  local S_quda_dwf = L:DiracPropagatorN(Nc)
  for s = 0, qcd.Ns - 1 do
     for c = 0, Nc - 1 do
        local sc_tag = string.format('s = %d, c = %d', s, c)
        printf("Inverting %s\n", sc_tag)
        local src_comp = L:DiracFermionN(Nc)
        src_comp = src[{c=c,d=s}]
        S_quda_dwf[{c=c,d=s}] = quda_dwf_solver:solve(src_comp)
        printf("Component %s inverted.\n", sc_tag)
     end
  end
  print("Solve complete.")
  show_propagator(S_quda_dwf)
  --

  --[[
  quda_dwf = dw_ferm.quda_4d_nc3(M, Ls, ml, bcs)
  print("Dwf made")
  quda_dwf_solver = propagator.make_from_ferm(quda_dwf, 1e-20, 5000)
  print("Solver made. Inverting now.")
  S_quda_dwf = compute_propagator(U, quda_dwf_solver, src)
  print("Inverted.")
  show_propagator(S_quda_dwf)
  ]]

else
  print("Running on CPU.")

  -- -- Clover fermions
  -- print("Clover fermions")
  -- clover = clover_ferm.cpu_4d_nc3(kappa, csw, bcs)
  -- cl_solver = propagator.make_from_ferm(clover, 1e-20, 1000)
  -- S_clover = compute_propagator(U, cl_solver, src)
  -- show_propagator(S_clover)

  -- DWF inverter
  print("DWFs on CPU.")
  DWF = qcd.MDWF.Shamir(U, bcs, LS, M, ml, 1.0)
  dwf_solver = DWF:mixed_solver(1e-10, 5000, 1e-20, 50000)
  S_dwf = dwf_solver(src)
  show_propagator(S_dwf)
end

print("Done with script.")
