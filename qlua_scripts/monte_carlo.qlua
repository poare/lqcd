require "stdlib"

L = qcd.lattice{4, 4, 4, 4}
volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end
Nc = 3    -- qcd.Nc

function toSUn(X)    -- Project a matrix onto SU(N)
  local Y = (X - X:adjoin()) / 2    -- anti-hermitian part
  return (Y - Y:trace() / Nc * L:ColorMatrix(complex(1, 0))):exp()
end

function weakSUn(L, S)    -- Generate a SU(N) matrix close to 1
  return toSUn(L, .1 * S:gaussian_ColorMatrix())
end

function strongSUn(L, S)
  local v = weakSUn(L, S)
  for i = 1, 100 do -- multiply a lot of small SU(n) matrices, then re project
    v = v * weakSUn(L, S)
  end
  return v:proj(1e-6, 150)
end

function plaquette(U, i, j)   -- U is the gauge field configuration, i = \hat{\mu}, j = \hat{\nu}
  local Ui = U[j + 1]:shift(i, "from_forward")
  local Uj = U[i + 1]:shift(j, "from_forward")
  local Pij = (U[i + 1] * Ui * Uj:adjoin() * U[j + 1]:adjoin()):trace():real()
  return Pij:sum() / (vol * Nc)
end

-- random generator used to create gauge field
r = { }
do
  r.x = os.random()
  local x = L:Int(r.x)
  for i = 0, #L - 1 do
    r[i+1] = os.random()
    x = x * L[i] + L:pcoord(i) * r[i+1]
  end
  r.f = os.random()
  S = L:RandomState(r.f, x)
end

-- eps = how close to 1 you want the matrix to be
-- This gives U_\mu, a #L-component Lorentz vector of SU(3) matrices
-- Differs from weakSUn because that only gives a single SU(3) matrix
function getVectorColorMatrix(eps)
  if eps == nil then eps = .1 end
  U = {}
  for i = 0, #L - 1 do
    U[i + 1] = toSUn(eps * S:gaussian_ColorMatrix())
  end
  return U
end

-- pass in U = nil to initialize a random start
function initGaugeField(U)
  W = {}
  for x = 0, L[0] - 1 do
    for y = 0, L[1] - 1 do
      for z = 0, L[2] - 1 do
        for t = 0, L[3] - 1 do
          if U == nil then
            W[{x, y, z, t}] = getVectorColorMatrix()
          else
            W[{x, y, z, t}] = U
          end
        end
      end
    end
  end
  return U
end

-- do monte carlo with P(U) = e^-S on the gauge field here
U = initGaugeField(getWeakColorMatrix())

-- add outer loop here until convergence
for x = 0, L[0] - 1 do
  for y = 0, L[1] - 1 do
    for z = 0, L[2] - 1 do
      for t = 0, L[3] - 1 do
        for i = 0, #L - 1 do    -- loop over Lorentz indices
          X = getWeakColorMatrix()  -- random color matrix near 1
          Un = U[{x, y, z, t}][i + 1]  -- U_\mu(n), field value at lattice point n and index \mu
          UPrime = X * Un
          delS = deltaS(UPrime, U[{x, y, z, t}], i)
          if r < .1 then  -- if you want to choose this
            U[{x, y, z, t}][i + 1] = UPrime
          end
        end
      end
    end
  end
end
